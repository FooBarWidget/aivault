# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-kms-v1` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-kms-v1`.


# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/version.rb#20
module Google; end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/version.rb#21
module Google::Cloud
  class << self
    # source://google-cloud-env/2.2.0/lib/google/cloud/env.rb#530
    def env; end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/version.rb#22
module Google::Cloud::Kms; end

# API client module.
#
# @example Load this package, including all its services, and instantiate a gRPC client
#
#   require "google/cloud/kms/v1"
#   client = ::Google::Cloud::Kms::V1::Autokey::Client.new
# @example Load this package, including all its services, and instantiate a REST client
#
#   require "google/cloud/kms/v1"
#   client = ::Google::Cloud::Kms::V1::Autokey::Rest::Client.new
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/version.rb#23
module Google::Cloud::Kms::V1
  class << self
    # Initialize the mixin bindings configuration
    #
    # @private
    # @yield [@configure]
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/bindings_override.rb#35
    def configure; end
  end
end

module Google::Cloud::Kms::V1::AccessReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::CUSTOMER_INITIATED_ACCESS = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::CUSTOMER_INITIATED_SUPPORT = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::GOOGLE_INITIATED_REVIEW = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::GOOGLE_INITIATED_SERVICE = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::GOOGLE_INITIATED_SYSTEM_OPERATION = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::GOOGLE_RESPONSE_TO_PRODUCTION_ALERT = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::MODIFIED_CUSTOMER_INITIATED_ACCESS = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::REASON_NOT_EXPECTED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::REASON_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#66
Google::Cloud::Kms::V1::AccessReason::THIRD_PARTY_DATA_REQUEST = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Kms::V1::AsymmetricDecryptRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::AsymmetricDecryptResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::AsymmetricSignRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::AsymmetricSignResponse < ::Google::Protobuf::AbstractMessage; end

# Configuration class for the google.cloud.kms.v1 package.
#
# This class contains common configuration for all services
# of the google.cloud.kms.v1 package.
#
# This configuration is for internal use of the client library classes,
# and it is not intended that the end-users will read or change it.
#
# @private
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/bindings_override.rb#212
class Google::Cloud::Kms::V1::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Kms::V1::Configuration] the object that the method was called on
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/bindings_override.rb#222
  def initialize(parent_config = T.unsafe(nil)); end

  # Overrides for http bindings for the RPC of the mixins for this package.
  # Services in this package should use these when creating clients for the mixin services.
  #
  # @private
  # @return [::Hash{::Symbol=>::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def bindings_override; end

  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def bindings_override=(new_value); end
end

class Google::Cloud::Kms::V1::CreateCryptoKeyRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::CreateCryptoKeyVersionRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::CreateImportJobRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::CreateKeyRingRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::CryptoKey < ::Google::Protobuf::AbstractMessage; end

module Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#49
Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ASYMMETRIC_DECRYPT = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#49
Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ASYMMETRIC_SIGN = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#49
Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::CRYPTO_KEY_PURPOSE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#49
Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ENCRYPT_DECRYPT = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#49
Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::MAC = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#49
Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::RAW_ENCRYPT_DECRYPT = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Kms::V1::CryptoKeyVersion < ::Google::Protobuf::AbstractMessage; end

module Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::AES_128_CBC = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::AES_128_CTR = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::AES_128_GCM = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::AES_256_CBC = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::AES_256_CTR = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::AES_256_GCM = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::EC_SIGN_ED25519 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::EC_SIGN_P256_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::EC_SIGN_P384_SHA384 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::EC_SIGN_SECP256K1_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::EXTERNAL_SYMMETRIC_ENCRYPTION = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::GOOGLE_SYMMETRIC_ENCRYPTION = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::HMAC_SHA1 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::HMAC_SHA224 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::HMAC_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::HMAC_SHA384 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::HMAC_SHA512 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_DECRYPT_OAEP_2048_SHA1 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_DECRYPT_OAEP_2048_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_DECRYPT_OAEP_3072_SHA1 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_DECRYPT_OAEP_3072_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_DECRYPT_OAEP_4096_SHA1 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_DECRYPT_OAEP_4096_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_DECRYPT_OAEP_4096_SHA512 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_PKCS1_2048_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_PKCS1_3072_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_PKCS1_4096_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_PKCS1_4096_SHA512 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_PSS_2048_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_PSS_3072_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_PSS_4096_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_PSS_4096_SHA512 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_RAW_PKCS1_2048 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_RAW_PKCS1_3072 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#55
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionAlgorithm::RSA_SIGN_RAW_PKCS1_4096 = T.let(T.unsafe(nil), Integer)

module Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::CRYPTO_KEY_VERSION_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DESTROYED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DESTROY_SCHEDULED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DISABLED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::ENABLED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::EXTERNAL_DESTRUCTION_FAILED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::GENERATION_FAILED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::IMPORT_FAILED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::PENDING_EXTERNAL_DESTRUCTION = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::PENDING_GENERATION = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#56
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::PENDING_IMPORT = T.let(T.unsafe(nil), Integer)

module Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionView
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#57
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionView::CRYPTO_KEY_VERSION_VIEW_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#57
Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionView::FULL = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Kms::V1::CryptoKeyVersionTemplate < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::DecryptRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::DecryptResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::DestroyCryptoKeyVersionRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::Digest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::EncryptRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::EncryptResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ExternalProtectionLevelOptions < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::GenerateRandomBytesRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::GenerateRandomBytesResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::GetCryptoKeyRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::GetCryptoKeyVersionRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::GetImportJobRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::GetKeyRingRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::GetPublicKeyRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ImportCryptoKeyVersionRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ImportJob < ::Google::Protobuf::AbstractMessage; end

module Google::Cloud::Kms::V1::ImportJob::ImportJobState
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#62
Google::Cloud::Kms::V1::ImportJob::ImportJobState::ACTIVE = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#62
Google::Cloud::Kms::V1::ImportJob::ImportJobState::EXPIRED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#62
Google::Cloud::Kms::V1::ImportJob::ImportJobState::IMPORT_JOB_STATE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#62
Google::Cloud::Kms::V1::ImportJob::ImportJobState::PENDING_GENERATION = T.let(T.unsafe(nil), Integer)

module Google::Cloud::Kms::V1::ImportJob::ImportMethod
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#61
Google::Cloud::Kms::V1::ImportJob::ImportMethod::IMPORT_METHOD_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#61
Google::Cloud::Kms::V1::ImportJob::ImportMethod::RSA_OAEP_3072_SHA1_AES_256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#61
Google::Cloud::Kms::V1::ImportJob::ImportMethod::RSA_OAEP_3072_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#61
Google::Cloud::Kms::V1::ImportJob::ImportMethod::RSA_OAEP_3072_SHA256_AES_256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#61
Google::Cloud::Kms::V1::ImportJob::ImportMethod::RSA_OAEP_4096_SHA1_AES_256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#61
Google::Cloud::Kms::V1::ImportJob::ImportMethod::RSA_OAEP_4096_SHA256 = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#61
Google::Cloud::Kms::V1::ImportJob::ImportMethod::RSA_OAEP_4096_SHA256_AES_256 = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Kms::V1::ImportJob::WrappingPublicKey < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::KeyAccessJustificationsPolicy < ::Google::Protobuf::AbstractMessage; end

# Google Cloud Key Management Service
#
# Manages cryptographic keys and operations using those keys. Implements a REST
# model with the following objects:
#
# * {::Google::Cloud::Kms::V1::KeyRing KeyRing}
# * {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}
# * {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
# * {::Google::Cloud::Kms::V1::ImportJob ImportJob}
#
# If you are using manual gRPC libraries, see
# [Using gRPC with Cloud KMS](https://cloud.google.com/kms/docs/grpc).
#
# @example Load this service and instantiate a gRPC client
#
#   require "google/cloud/kms/v1/key_management_service"
#   client = ::Google::Cloud::Kms::V1::KeyManagementService::Client.new
# @example Load this service and instantiate a REST client
#
#   require "google/cloud/kms/v1/key_management_service/rest"
#   client = ::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/credentials.rb#25
module Google::Cloud::Kms::V1::KeyManagementService; end

# Client for the KeyManagementService service.
#
# Google Cloud Key Management Service
#
# Manages cryptographic keys and operations using those keys. Implements a REST
# model with the following objects:
#
# * {::Google::Cloud::Kms::V1::KeyRing KeyRing}
# * {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}
# * {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
# * {::Google::Cloud::Kms::V1::ImportJob ImportJob}
#
# If you are using manual gRPC libraries, see
# [Using gRPC with Cloud KMS](https://cloud.google.com/kms/docs/grpc).
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#45
class Google::Cloud::Kms::V1::KeyManagementService::Client
  include ::Google::Cloud::Kms::V1::KeyManagementService::Paths

  # Create a new KeyManagementService client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::Kms::V1::KeyManagementService::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the KeyManagementService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#261
  def initialize; end

  # Decrypts data that was encrypted with a public key retrieved from
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#get_public_key GetPublicKey}
  # corresponding to a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
  # with {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose}
  # ASYMMETRIC_DECRYPT.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::AsymmetricDecryptRequest.new
  #
  #   # Call the asymmetric_decrypt method.
  #   result = client.asymmetric_decrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::AsymmetricDecryptResponse.
  #   p result
  # @overload asymmetric_decrypt
  # @overload asymmetric_decrypt
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::AsymmetricDecryptResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::AsymmetricDecryptResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3131
  def asymmetric_decrypt(request, options = T.unsafe(nil)); end

  # Signs data using a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
  # with {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose}
  # ASYMMETRIC_SIGN, producing a signature that can be verified with the public
  # key retrieved from
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#get_public_key GetPublicKey}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::AsymmetricSignRequest.new
  #
  #   # Call the asymmetric_sign method.
  #   result = client.asymmetric_sign request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::AsymmetricSignResponse.
  #   p result
  # @overload asymmetric_sign
  # @overload asymmetric_sign
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::AsymmetricSignResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::AsymmetricSignResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3015
  def asymmetric_sign(request, options = T.unsafe(nil)); end

  # Configure the KeyManagementService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::Kms::V1::KeyManagementService::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#231
  def configure; end

  # Create a new {::Google::Cloud::Kms::V1::CryptoKey CryptoKey} within a
  # {::Google::Cloud::Kms::V1::KeyRing KeyRing}.
  #
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} and
  # {::Google::Cloud::Kms::V1::CryptoKeyVersionTemplate#algorithm CryptoKey.version_template.algorithm}
  # are required.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::CreateCryptoKeyRequest.new
  #
  #   # Call the create_crypto_key method.
  #   result = client.create_crypto_key request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKey.
  #   p result
  # @overload create_crypto_key
  # @overload create_crypto_key
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKey]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1392
  def create_crypto_key(request, options = T.unsafe(nil)); end

  # Create a new {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} in a
  # {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}.
  #
  # The server will assign the next sequential id. If unset,
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state state} will be set to
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::ENABLED ENABLED}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::CreateCryptoKeyVersionRequest.new
  #
  #   # Call the create_crypto_key_version method.
  #   result = client.create_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload create_crypto_key_version
  # @overload create_crypto_key_version
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1488
  def create_crypto_key_version(request, options = T.unsafe(nil)); end

  # Create a new {::Google::Cloud::Kms::V1::ImportJob ImportJob} within a
  # {::Google::Cloud::Kms::V1::KeyRing KeyRing}.
  #
  # {::Google::Cloud::Kms::V1::ImportJob#import_method ImportJob.import_method} is
  # required.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::CreateImportJobRequest.new
  #
  #   # Call the create_import_job method.
  #   result = client.create_import_job request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::ImportJob.
  #   p result
  # @overload create_import_job
  # @overload create_import_job
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::ImportJob]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::ImportJob]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1759
  def create_import_job(request, options = T.unsafe(nil)); end

  # Create a new {::Google::Cloud::Kms::V1::KeyRing KeyRing} in a given Project and
  # Location.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::CreateKeyRingRequest.new
  #
  #   # Call the create_key_ring method.
  #   result = client.create_key_ring request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::KeyRing.
  #   p result
  # @overload create_key_ring
  # @overload create_key_ring
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::KeyRing]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::KeyRing]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1285
  def create_key_ring(request, options = T.unsafe(nil)); end

  # Decrypts data that was protected by
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#encrypt Encrypt}. The
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ENCRYPT_DECRYPT ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::DecryptRequest.new
  #
  #   # Call the decrypt method.
  #   result = client.decrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::DecryptResponse.
  #   p result
  # @overload decrypt
  # @overload decrypt
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::DecryptResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::DecryptResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#2542
  def decrypt(request, options = T.unsafe(nil)); end

  # Schedule a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} for
  # destruction.
  #
  # Upon calling this method,
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state CryptoKeyVersion.state} will
  # be set to
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DESTROY_SCHEDULED DESTROY_SCHEDULED},
  # and {::Google::Cloud::Kms::V1::CryptoKeyVersion#destroy_time destroy_time} will
  # be set to the time
  # {::Google::Cloud::Kms::V1::CryptoKey#destroy_scheduled_duration destroy_scheduled_duration}
  # in the future. At that time, the
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state state} will automatically
  # change to
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DESTROYED DESTROYED},
  # and the key material will be irrevocably destroyed.
  #
  # Before the
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#destroy_time destroy_time} is
  # reached,
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#restore_crypto_key_version RestoreCryptoKeyVersion}
  # may be called to reverse the process.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::DestroyCryptoKeyVersionRequest.new
  #
  #   # Call the destroy_crypto_key_version method.
  #   result = client.destroy_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload destroy_crypto_key_version
  # @overload destroy_crypto_key_version
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#2149
  def destroy_crypto_key_version(request, options = T.unsafe(nil)); end

  # Encrypts data, so that it can only be recovered by a call to
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#decrypt Decrypt}. The
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ENCRYPT_DECRYPT ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::EncryptRequest.new
  #
  #   # Call the encrypt method.
  #   result = client.encrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::EncryptResponse.
  #   p result
  # @overload encrypt
  # @overload encrypt
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::EncryptResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::EncryptResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#2405
  def encrypt(request, options = T.unsafe(nil)); end

  # Generate random bytes using the Cloud KMS randomness source in the provided
  # location.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GenerateRandomBytesRequest.new
  #
  #   # Call the generate_random_bytes method.
  #   result = client.generate_random_bytes request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::GenerateRandomBytesResponse.
  #   p result
  # @overload generate_random_bytes
  # @overload generate_random_bytes
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::GenerateRandomBytesResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::GenerateRandomBytesResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3471
  def generate_random_bytes(request, options = T.unsafe(nil)); end

  # Returns metadata for a given {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}, as
  # well as its {::Google::Cloud::Kms::V1::CryptoKey#primary primary}
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetCryptoKeyRequest.new
  #
  #   # Call the get_crypto_key method.
  #   result = client.get_crypto_key request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKey.
  #   p result
  # @overload get_crypto_key
  # @overload get_crypto_key
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKey]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#923
  def get_crypto_key(request, options = T.unsafe(nil)); end

  # Returns metadata for a given
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetCryptoKeyVersionRequest.new
  #
  #   # Call the get_crypto_key_version method.
  #   result = client.get_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload get_crypto_key_version
  # @overload get_crypto_key_version
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1011
  def get_crypto_key_version(request, options = T.unsafe(nil)); end

  # Returns metadata for a given {::Google::Cloud::Kms::V1::ImportJob ImportJob}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetImportJobRequest.new
  #
  #   # Call the get_import_job method.
  #   result = client.get_import_job request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::ImportJob.
  #   p result
  # @overload get_import_job
  # @overload get_import_job
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::ImportJob]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::ImportJob]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1190
  def get_import_job(request, options = T.unsafe(nil)); end

  # Returns metadata for a given {::Google::Cloud::Kms::V1::KeyRing KeyRing}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetKeyRingRequest.new
  #
  #   # Call the get_key_ring method.
  #   result = client.get_key_ring request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::KeyRing.
  #   p result
  # @overload get_key_ring
  # @overload get_key_ring
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::KeyRing]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::KeyRing]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#834
  def get_key_ring(request, options = T.unsafe(nil)); end

  # Returns the public key for the given
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}. The
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ASYMMETRIC_SIGN ASYMMETRIC_SIGN}
  # or
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ASYMMETRIC_DECRYPT ASYMMETRIC_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetPublicKeyRequest.new
  #
  #   # Call the get_public_key method.
  #   result = client.get_public_key request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::PublicKey.
  #   p result
  # @overload get_public_key
  # @overload get_public_key
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::PublicKey]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::PublicKey]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1103
  def get_public_key(request, options = T.unsafe(nil)); end

  # Get the associated client for mix-in of the IAMPolicy.
  #
  # @return [Google::Iam::V1::IAMPolicy::Client]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#327
  def iam_policy_client; end

  # Import wrapped key material into a
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}.
  #
  # All requests must specify a {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}. If
  # a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} is additionally
  # specified in the request, key material will be reimported into that
  # version. Otherwise, a new version will be created, and will be assigned the
  # next sequential id within the {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ImportCryptoKeyVersionRequest.new
  #
  #   # Call the import_crypto_key_version method.
  #   result = client.import_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload import_crypto_key_version
  # @overload import_crypto_key_version
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1661
  def import_crypto_key_version(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#55
  def key_management_service_stub; end

  # Lists {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersions}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ListCryptoKeyVersionsRequest.new
  #
  #   # Call the list_crypto_key_versions method.
  #   result = client.list_crypto_key_versions request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p item
  #   end
  # @overload list_crypto_key_versions
  # @overload list_crypto_key_versions
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Kms::V1::CryptoKeyVersion>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Kms::V1::CryptoKeyVersion>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#633
  def list_crypto_key_versions(request, options = T.unsafe(nil)); end

  # Lists {::Google::Cloud::Kms::V1::CryptoKey CryptoKeys}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ListCryptoKeysRequest.new
  #
  #   # Call the list_crypto_keys method.
  #   result = client.list_crypto_keys request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Kms::V1::CryptoKey.
  #   p item
  #   end
  # @overload list_crypto_keys
  # @overload list_crypto_keys
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Kms::V1::CryptoKey>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Kms::V1::CryptoKey>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#517
  def list_crypto_keys(request, options = T.unsafe(nil)); end

  # Lists {::Google::Cloud::Kms::V1::ImportJob ImportJobs}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ListImportJobsRequest.new
  #
  #   # Call the list_import_jobs method.
  #   result = client.list_import_jobs request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Kms::V1::ImportJob.
  #   p item
  #   end
  # @overload list_import_jobs
  # @overload list_import_jobs
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Kms::V1::ImportJob>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Kms::V1::ImportJob>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#746
  def list_import_jobs(request, options = T.unsafe(nil)); end

  # Lists {::Google::Cloud::Kms::V1::KeyRing KeyRings}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ListKeyRingsRequest.new
  #
  #   # Call the list_key_rings method.
  #   result = client.list_key_rings request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Kms::V1::KeyRing.
  #   p item
  #   end
  # @overload list_key_rings
  # @overload list_key_rings
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Kms::V1::KeyRing>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Kms::V1::KeyRing>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#402
  def list_key_rings(request, options = T.unsafe(nil)); end

  # Get the associated client for mix-in of the Locations.
  #
  # @return [Google::Cloud::Location::Locations::Client]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#320
  def location_client; end

  # Signs data using a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
  # with {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} MAC,
  # producing a tag that can be verified by another source with the same key.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::MacSignRequest.new
  #
  #   # Call the mac_sign method.
  #   result = client.mac_sign request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::MacSignResponse.
  #   p result
  # @overload mac_sign
  # @overload mac_sign
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::MacSignResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::MacSignResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3242
  def mac_sign(request, options = T.unsafe(nil)); end

  # Verifies MAC tag using a
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} with
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} MAC, and returns
  # a response that indicates whether or not the verification was successful.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::MacVerifyRequest.new
  #
  #   # Call the mac_verify method.
  #   result = client.mac_verify request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::MacVerifyResponse.
  #   p result
  # @overload mac_verify
  # @overload mac_verify
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::MacVerifyResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::MacVerifyResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3375
  def mac_verify(request, options = T.unsafe(nil)); end

  # Decrypts data that was originally encrypted using a raw cryptographic
  # mechanism. The {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose}
  # must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::RAW_ENCRYPT_DECRYPT RAW_ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::RawDecryptRequest.new
  #
  #   # Call the raw_decrypt method.
  #   result = client.raw_decrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::RawDecryptResponse.
  #   p result
  # @overload raw_decrypt
  # @overload raw_decrypt
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::RawDecryptResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::RawDecryptResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#2870
  def raw_decrypt(request, options = T.unsafe(nil)); end

  # Encrypts data using portable cryptographic primitives. Most users should
  # choose {::Google::Cloud::Kms::V1::KeyManagementService::Client#encrypt Encrypt} and
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#decrypt Decrypt} rather than
  # their raw counterparts. The
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::RAW_ENCRYPT_DECRYPT RAW_ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::RawEncryptRequest.new
  #
  #   # Call the raw_encrypt method.
  #   result = client.raw_encrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::RawEncryptResponse.
  #   p result
  # @overload raw_encrypt
  # @overload raw_encrypt
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::RawEncryptResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::RawEncryptResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#2716
  def raw_encrypt(request, options = T.unsafe(nil)); end

  # Restore a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} in the
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DESTROY_SCHEDULED DESTROY_SCHEDULED}
  # state.
  #
  # Upon restoration of the CryptoKeyVersion,
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state state} will be set to
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DISABLED DISABLED},
  # and {::Google::Cloud::Kms::V1::CryptoKeyVersion#destroy_time destroy_time} will
  # be cleared.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::RestoreCryptoKeyVersionRequest.new
  #
  #   # Call the restore_crypto_key_version method.
  #   result = client.restore_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload restore_crypto_key_version
  # @overload restore_crypto_key_version
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#2244
  def restore_crypto_key_version(request, options = T.unsafe(nil)); end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#241
  def universe_domain; end

  # Update a {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::UpdateCryptoKeyRequest.new
  #
  #   # Call the update_crypto_key method.
  #   result = client.update_crypto_key request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKey.
  #   p result
  # @overload update_crypto_key
  # @overload update_crypto_key
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKey]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1847
  def update_crypto_key(request, options = T.unsafe(nil)); end

  # Update the version of a {::Google::Cloud::Kms::V1::CryptoKey CryptoKey} that
  # will be used in
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#encrypt Encrypt}.
  #
  # Returns an error if called on a key whose purpose is not
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ENCRYPT_DECRYPT ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::UpdateCryptoKeyPrimaryVersionRequest.new
  #
  #   # Call the update_crypto_key_primary_version method.
  #   result = client.update_crypto_key_primary_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKey.
  #   p result
  # @overload update_crypto_key_primary_version
  # @overload update_crypto_key_primary_version
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKey]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#2042
  def update_crypto_key_primary_version(request, options = T.unsafe(nil)); end

  # Update a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}'s
  # metadata.
  #
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state state} may be changed between
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::ENABLED ENABLED}
  # and
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DISABLED DISABLED}
  # using this method. See
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#destroy_crypto_key_version DestroyCryptoKeyVersion}
  # and
  # {::Google::Cloud::Kms::V1::KeyManagementService::Client#restore_crypto_key_version RestoreCryptoKeyVersion}
  # to move between other states.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::UpdateCryptoKeyVersionRequest.new
  #
  #   # Call the update_crypto_key_version method.
  #   result = client.update_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload update_crypto_key_version
  # @overload update_crypto_key_version
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#1947
  def update_crypto_key_version(request, options = T.unsafe(nil)); end

  class << self
    # Configure the KeyManagementService Client class.
    #
    # See {::Google::Cloud::Kms::V1::KeyManagementService::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all KeyManagementService clients
    #   ::Google::Cloud::Kms::V1::KeyManagementService::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#75
    def configure; end
  end
end

# @private
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#47
Google::Cloud::Kms::V1::KeyManagementService::Client::API_VERSION = T.let(T.unsafe(nil), String)

# Configuration class for the KeyManagementService API.
#
# This class represents the configuration for KeyManagementService,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::Kms::V1::KeyManagementService::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_key_rings to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::Kms::V1::KeyManagementService::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_key_rings.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::Kms::V1::KeyManagementService::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_key_rings.timeout = 20.0
#   end
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3597
class Google::Cloud::Kms::V1::KeyManagementService::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Kms::V1::KeyManagementService::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3622
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Configuration for the channel pool
  #
  # @return [::Gapic::ServiceStub::ChannelPool::Configuration]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3644
  def channel_pool; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def endpoint; end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3632
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def timeout=(new_value); end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def universe_domain; end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def universe_domain=(new_value); end
end

# The endpoint specific to the default "googleapis.com" universe. Deprecated.
#
# @private
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3602
Google::Cloud::Kms::V1::KeyManagementService::Client::Configuration::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)

# Configuration RPC class for the KeyManagementService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3665
class Google::Cloud::Kms::V1::KeyManagementService::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Kms::V1::KeyManagementService::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3808
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `asymmetric_decrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3790
  def asymmetric_decrypt; end

  # RPC-specific configuration for `asymmetric_sign`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3785
  def asymmetric_sign; end

  # RPC-specific configuration for `create_crypto_key`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3720
  def create_crypto_key; end

  # RPC-specific configuration for `create_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3725
  def create_crypto_key_version; end

  # RPC-specific configuration for `create_import_job`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3735
  def create_import_job; end

  # RPC-specific configuration for `create_key_ring`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3715
  def create_key_ring; end

  # RPC-specific configuration for `decrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3770
  def decrypt; end

  # RPC-specific configuration for `destroy_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3755
  def destroy_crypto_key_version; end

  # RPC-specific configuration for `encrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3765
  def encrypt; end

  # RPC-specific configuration for `generate_random_bytes`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3805
  def generate_random_bytes; end

  # RPC-specific configuration for `get_crypto_key`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3695
  def get_crypto_key; end

  # RPC-specific configuration for `get_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3700
  def get_crypto_key_version; end

  # RPC-specific configuration for `get_import_job`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3710
  def get_import_job; end

  # RPC-specific configuration for `get_key_ring`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3690
  def get_key_ring; end

  # RPC-specific configuration for `get_public_key`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3705
  def get_public_key; end

  # RPC-specific configuration for `import_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3730
  def import_crypto_key_version; end

  # RPC-specific configuration for `list_crypto_key_versions`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3680
  def list_crypto_key_versions; end

  # RPC-specific configuration for `list_crypto_keys`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3675
  def list_crypto_keys; end

  # RPC-specific configuration for `list_import_jobs`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3685
  def list_import_jobs; end

  # RPC-specific configuration for `list_key_rings`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3670
  def list_key_rings; end

  # RPC-specific configuration for `mac_sign`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3795
  def mac_sign; end

  # RPC-specific configuration for `mac_verify`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3800
  def mac_verify; end

  # RPC-specific configuration for `raw_decrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3780
  def raw_decrypt; end

  # RPC-specific configuration for `raw_encrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3775
  def raw_encrypt; end

  # RPC-specific configuration for `restore_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3760
  def restore_crypto_key_version; end

  # RPC-specific configuration for `update_crypto_key`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3740
  def update_crypto_key; end

  # RPC-specific configuration for `update_crypto_key_primary_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3750
  def update_crypto_key_primary_version; end

  # RPC-specific configuration for `update_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#3745
  def update_crypto_key_version; end
end

# @private
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/client.rb#50
Google::Cloud::Kms::V1::KeyManagementService::Client::DEFAULT_ENDPOINT_TEMPLATE = T.let(T.unsafe(nil), String)

# Credentials for the KeyManagementService API.
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/credentials.rb#27
class Google::Cloud::Kms::V1::KeyManagementService::Credentials < ::Google::Auth::Credentials; end

# Path helper methods for the KeyManagementService API.
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/paths.rb#26
module Google::Cloud::Kms::V1::KeyManagementService::Paths
  extend ::Google::Cloud::Kms::V1::KeyManagementService::Paths

  # Create a fully-qualified CryptoKey resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`
  #
  # @param project [String]
  # @param location [String]
  # @param key_ring [String]
  # @param crypto_key [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/paths.rb#40
  def crypto_key_path(project:, location:, key_ring:, crypto_key:); end

  # Create a fully-qualified CryptoKeyVersion resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`
  #
  # @param project [String]
  # @param location [String]
  # @param key_ring [String]
  # @param crypto_key [String]
  # @param crypto_key_version [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/paths.rb#62
  def crypto_key_version_path(project:, location:, key_ring:, crypto_key:, crypto_key_version:); end

  # Create a fully-qualified ImportJob resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}/locations/{location}/keyRings/{key_ring}/importJobs/{import_job}`
  #
  # @param project [String]
  # @param location [String]
  # @param key_ring [String]
  # @param import_job [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/paths.rb#84
  def import_job_path(project:, location:, key_ring:, import_job:); end

  # Create a fully-qualified KeyRing resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}/locations/{location}/keyRings/{key_ring}`
  #
  # @param project [String]
  # @param location [String]
  # @param key_ring [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/paths.rb#104
  def key_ring_path(project:, location:, key_ring:); end

  # Create a fully-qualified Location resource string.
  #
  # The resource will be in the following format:
  #
  # `projects/{project}/locations/{location}`
  #
  # @param project [String]
  # @param location [String]
  # @raise [::ArgumentError]
  # @return [::String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/paths.rb#122
  def location_path(project:, location:); end
end

# Client for the REST transport
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#26
module Google::Cloud::Kms::V1::KeyManagementService::Rest; end

# REST client for the KeyManagementService service.
#
# Google Cloud Key Management Service
#
# Manages cryptographic keys and operations using those keys. Implements a REST
# model with the following objects:
#
# * {::Google::Cloud::Kms::V1::KeyRing KeyRing}
# * {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}
# * {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
# * {::Google::Cloud::Kms::V1::ImportJob ImportJob}
#
# If you are using manual gRPC libraries, see
# [Using gRPC with Cloud KMS](https://cloud.google.com/kms/docs/grpc).
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#47
class Google::Cloud::Kms::V1::KeyManagementService::Rest::Client
  include ::Google::Cloud::Kms::V1::KeyManagementService::Paths

  # Create a new KeyManagementService REST client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the KeyManagementService client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#263
  def initialize; end

  # Decrypts data that was encrypted with a public key retrieved from
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#get_public_key GetPublicKey}
  # corresponding to a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
  # with {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose}
  # ASYMMETRIC_DECRYPT.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::AsymmetricDecryptRequest.new
  #
  #   # Call the asymmetric_decrypt method.
  #   result = client.asymmetric_decrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::AsymmetricDecryptResponse.
  #   p result
  # @overload asymmetric_decrypt
  # @overload asymmetric_decrypt
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::AsymmetricDecryptResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::AsymmetricDecryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#2957
  def asymmetric_decrypt(request, options = T.unsafe(nil)); end

  # Signs data using a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
  # with {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose}
  # ASYMMETRIC_SIGN, producing a signature that can be verified with the public
  # key retrieved from
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#get_public_key GetPublicKey}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::AsymmetricSignRequest.new
  #
  #   # Call the asymmetric_sign method.
  #   result = client.asymmetric_sign request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::AsymmetricSignResponse.
  #   p result
  # @overload asymmetric_sign
  # @overload asymmetric_sign
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::AsymmetricSignResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::AsymmetricSignResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#2848
  def asymmetric_sign(request, options = T.unsafe(nil)); end

  # Configure the KeyManagementService Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#233
  def configure; end

  # Create a new {::Google::Cloud::Kms::V1::CryptoKey CryptoKey} within a
  # {::Google::Cloud::Kms::V1::KeyRing KeyRing}.
  #
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} and
  # {::Google::Cloud::Kms::V1::CryptoKeyVersionTemplate#algorithm CryptoKey.version_template.algorithm}
  # are required.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::CreateCryptoKeyRequest.new
  #
  #   # Call the create_crypto_key method.
  #   result = client.create_crypto_key request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKey.
  #   p result
  # @overload create_crypto_key
  # @overload create_crypto_key
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKey]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1316
  def create_crypto_key(request, options = T.unsafe(nil)); end

  # Create a new {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} in a
  # {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}.
  #
  # The server will assign the next sequential id. If unset,
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state state} will be set to
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::ENABLED ENABLED}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::CreateCryptoKeyVersionRequest.new
  #
  #   # Call the create_crypto_key_version method.
  #   result = client.create_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload create_crypto_key_version
  # @overload create_crypto_key_version
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1405
  def create_crypto_key_version(request, options = T.unsafe(nil)); end

  # Create a new {::Google::Cloud::Kms::V1::ImportJob ImportJob} within a
  # {::Google::Cloud::Kms::V1::KeyRing KeyRing}.
  #
  # {::Google::Cloud::Kms::V1::ImportJob#import_method ImportJob.import_method} is
  # required.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::CreateImportJobRequest.new
  #
  #   # Call the create_import_job method.
  #   result = client.create_import_job request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::ImportJob.
  #   p result
  # @overload create_import_job
  # @overload create_import_job
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::ImportJob]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::ImportJob]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1662
  def create_import_job(request, options = T.unsafe(nil)); end

  # Create a new {::Google::Cloud::Kms::V1::KeyRing KeyRing} in a given Project and
  # Location.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::CreateKeyRingRequest.new
  #
  #   # Call the create_key_ring method.
  #   result = client.create_key_ring request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::KeyRing.
  #   p result
  # @overload create_key_ring
  # @overload create_key_ring
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::KeyRing]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::KeyRing]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1216
  def create_key_ring(request, options = T.unsafe(nil)); end

  # Decrypts data that was protected by
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#encrypt Encrypt}. The
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ENCRYPT_DECRYPT ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::DecryptRequest.new
  #
  #   # Call the decrypt method.
  #   result = client.decrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::DecryptResponse.
  #   p result
  # @overload decrypt
  # @overload decrypt
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::DecryptResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::DecryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#2396
  def decrypt(request, options = T.unsafe(nil)); end

  # Schedule a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} for
  # destruction.
  #
  # Upon calling this method,
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state CryptoKeyVersion.state} will
  # be set to
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DESTROY_SCHEDULED DESTROY_SCHEDULED},
  # and {::Google::Cloud::Kms::V1::CryptoKeyVersion#destroy_time destroy_time} will
  # be set to the time
  # {::Google::Cloud::Kms::V1::CryptoKey#destroy_scheduled_duration destroy_scheduled_duration}
  # in the future. At that time, the
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state state} will automatically
  # change to
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DESTROYED DESTROYED},
  # and the key material will be irrevocably destroyed.
  #
  # Before the
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#destroy_time destroy_time} is
  # reached,
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#restore_crypto_key_version RestoreCryptoKeyVersion}
  # may be called to reverse the process.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::DestroyCryptoKeyVersionRequest.new
  #
  #   # Call the destroy_crypto_key_version method.
  #   result = client.destroy_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload destroy_crypto_key_version
  # @overload destroy_crypto_key_version
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#2024
  def destroy_crypto_key_version(request, options = T.unsafe(nil)); end

  # Encrypts data, so that it can only be recovered by a call to
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#decrypt Decrypt}. The
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ENCRYPT_DECRYPT ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::EncryptRequest.new
  #
  #   # Call the encrypt method.
  #   result = client.encrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::EncryptResponse.
  #   p result
  # @overload encrypt
  # @overload encrypt
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::EncryptResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::EncryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#2266
  def encrypt(request, options = T.unsafe(nil)); end

  # Generate random bytes using the Cloud KMS randomness source in the provided
  # location.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GenerateRandomBytesRequest.new
  #
  #   # Call the generate_random_bytes method.
  #   result = client.generate_random_bytes request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::GenerateRandomBytesResponse.
  #   p result
  # @overload generate_random_bytes
  # @overload generate_random_bytes
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::GenerateRandomBytesResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::GenerateRandomBytesResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3276
  def generate_random_bytes(request, options = T.unsafe(nil)); end

  # Returns metadata for a given {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}, as
  # well as its {::Google::Cloud::Kms::V1::CryptoKey#primary primary}
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetCryptoKeyRequest.new
  #
  #   # Call the get_crypto_key method.
  #   result = client.get_crypto_key request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKey.
  #   p result
  # @overload get_crypto_key
  # @overload get_crypto_key
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKey]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#882
  def get_crypto_key(request, options = T.unsafe(nil)); end

  # Returns metadata for a given
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetCryptoKeyVersionRequest.new
  #
  #   # Call the get_crypto_key_version method.
  #   result = client.get_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload get_crypto_key_version
  # @overload get_crypto_key_version
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#963
  def get_crypto_key_version(request, options = T.unsafe(nil)); end

  # Returns metadata for a given {::Google::Cloud::Kms::V1::ImportJob ImportJob}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetImportJobRequest.new
  #
  #   # Call the get_import_job method.
  #   result = client.get_import_job request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::ImportJob.
  #   p result
  # @overload get_import_job
  # @overload get_import_job
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::ImportJob]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::ImportJob]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1128
  def get_import_job(request, options = T.unsafe(nil)); end

  # Returns metadata for a given {::Google::Cloud::Kms::V1::KeyRing KeyRing}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetKeyRingRequest.new
  #
  #   # Call the get_key_ring method.
  #   result = client.get_key_ring request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::KeyRing.
  #   p result
  # @overload get_key_ring
  # @overload get_key_ring
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::KeyRing]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::KeyRing]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#800
  def get_key_ring(request, options = T.unsafe(nil)); end

  # Returns the public key for the given
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}. The
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ASYMMETRIC_SIGN ASYMMETRIC_SIGN}
  # or
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ASYMMETRIC_DECRYPT ASYMMETRIC_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::GetPublicKeyRequest.new
  #
  #   # Call the get_public_key method.
  #   result = client.get_public_key request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::PublicKey.
  #   p result
  # @overload get_public_key
  # @overload get_public_key
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::PublicKey]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::PublicKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1048
  def get_public_key(request, options = T.unsafe(nil)); end

  # Get the associated client for mix-in of the IAMPolicy.
  #
  # @return [Google::Iam::V1::IAMPolicy::Rest::Client]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#322
  def iam_policy_client; end

  # Import wrapped key material into a
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}.
  #
  # All requests must specify a {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}. If
  # a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} is additionally
  # specified in the request, key material will be reimported into that
  # version. Otherwise, a new version will be created, and will be assigned the
  # next sequential id within the {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ImportCryptoKeyVersionRequest.new
  #
  #   # Call the import_crypto_key_version method.
  #   result = client.import_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload import_crypto_key_version
  # @overload import_crypto_key_version
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1571
  def import_crypto_key_version(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#57
  def key_management_service_stub; end

  # Lists {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersions}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ListCryptoKeyVersionsRequest.new
  #
  #   # Call the list_crypto_key_versions method.
  #   result = client.list_crypto_key_versions request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p item
  #   end
  # @overload list_crypto_key_versions
  # @overload list_crypto_key_versions
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Kms::V1::CryptoKeyVersion>]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Kms::V1::CryptoKeyVersion>]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#613
  def list_crypto_key_versions(request, options = T.unsafe(nil)); end

  # Lists {::Google::Cloud::Kms::V1::CryptoKey CryptoKeys}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ListCryptoKeysRequest.new
  #
  #   # Call the list_crypto_keys method.
  #   result = client.list_crypto_keys request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Kms::V1::CryptoKey.
  #   p item
  #   end
  # @overload list_crypto_keys
  # @overload list_crypto_keys
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Kms::V1::CryptoKey>]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Kms::V1::CryptoKey>]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#504
  def list_crypto_keys(request, options = T.unsafe(nil)); end

  # Lists {::Google::Cloud::Kms::V1::ImportJob ImportJobs}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ListImportJobsRequest.new
  #
  #   # Call the list_import_jobs method.
  #   result = client.list_import_jobs request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Kms::V1::ImportJob.
  #   p item
  #   end
  # @overload list_import_jobs
  # @overload list_import_jobs
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Kms::V1::ImportJob>]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Kms::V1::ImportJob>]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#719
  def list_import_jobs(request, options = T.unsafe(nil)); end

  # Lists {::Google::Cloud::Kms::V1::KeyRing KeyRings}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::ListKeyRingsRequest.new
  #
  #   # Call the list_key_rings method.
  #   result = client.list_key_rings request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Kms::V1::KeyRing.
  #   p item
  #   end
  # @overload list_key_rings
  # @overload list_key_rings
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Kms::V1::KeyRing>]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Kms::V1::KeyRing>]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#396
  def list_key_rings(request, options = T.unsafe(nil)); end

  # Get the associated client for mix-in of the Locations.
  #
  # @return [Google::Cloud::Location::Locations::Rest::Client]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#315
  def location_client; end

  # Signs data using a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}
  # with {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} MAC,
  # producing a tag that can be verified by another source with the same key.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::MacSignRequest.new
  #
  #   # Call the mac_sign method.
  #   result = client.mac_sign request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::MacSignResponse.
  #   p result
  # @overload mac_sign
  # @overload mac_sign
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::MacSignResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::MacSignResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3061
  def mac_sign(request, options = T.unsafe(nil)); end

  # Verifies MAC tag using a
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} with
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} MAC, and returns
  # a response that indicates whether or not the verification was successful.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::MacVerifyRequest.new
  #
  #   # Call the mac_verify method.
  #   result = client.mac_verify request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::MacVerifyResponse.
  #   p result
  # @overload mac_verify
  # @overload mac_verify
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::MacVerifyResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::MacVerifyResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3187
  def mac_verify(request, options = T.unsafe(nil)); end

  # Decrypts data that was originally encrypted using a raw cryptographic
  # mechanism. The {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose}
  # must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::RAW_ENCRYPT_DECRYPT RAW_ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::RawDecryptRequest.new
  #
  #   # Call the raw_decrypt method.
  #   result = client.raw_decrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::RawDecryptResponse.
  #   p result
  # @overload raw_decrypt
  # @overload raw_decrypt
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::RawDecryptResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::RawDecryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#2710
  def raw_decrypt(request, options = T.unsafe(nil)); end

  # Encrypts data using portable cryptographic primitives. Most users should
  # choose {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#encrypt Encrypt} and
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#decrypt Decrypt} rather than
  # their raw counterparts. The
  # {::Google::Cloud::Kms::V1::CryptoKey#purpose CryptoKey.purpose} must be
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::RAW_ENCRYPT_DECRYPT RAW_ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::RawEncryptRequest.new
  #
  #   # Call the raw_encrypt method.
  #   result = client.raw_encrypt request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::RawEncryptResponse.
  #   p result
  # @overload raw_encrypt
  # @overload raw_encrypt
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::RawEncryptResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::RawEncryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#2563
  def raw_encrypt(request, options = T.unsafe(nil)); end

  # Restore a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion} in the
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DESTROY_SCHEDULED DESTROY_SCHEDULED}
  # state.
  #
  # Upon restoration of the CryptoKeyVersion,
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state state} will be set to
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DISABLED DISABLED},
  # and {::Google::Cloud::Kms::V1::CryptoKeyVersion#destroy_time destroy_time} will
  # be cleared.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::RestoreCryptoKeyVersionRequest.new
  #
  #   # Call the restore_crypto_key_version method.
  #   result = client.restore_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload restore_crypto_key_version
  # @overload restore_crypto_key_version
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#2112
  def restore_crypto_key_version(request, options = T.unsafe(nil)); end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#243
  def universe_domain; end

  # Update a {::Google::Cloud::Kms::V1::CryptoKey CryptoKey}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::UpdateCryptoKeyRequest.new
  #
  #   # Call the update_crypto_key method.
  #   result = client.update_crypto_key request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKey.
  #   p result
  # @overload update_crypto_key
  # @overload update_crypto_key
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKey]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1743
  def update_crypto_key(request, options = T.unsafe(nil)); end

  # Update the version of a {::Google::Cloud::Kms::V1::CryptoKey CryptoKey} that
  # will be used in
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#encrypt Encrypt}.
  #
  # Returns an error if called on a key whose purpose is not
  # {::Google::Cloud::Kms::V1::CryptoKey::CryptoKeyPurpose::ENCRYPT_DECRYPT ENCRYPT_DECRYPT}.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::UpdateCryptoKeyPrimaryVersionRequest.new
  #
  #   # Call the update_crypto_key_primary_version method.
  #   result = client.update_crypto_key_primary_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKey.
  #   p result
  # @overload update_crypto_key_primary_version
  # @overload update_crypto_key_primary_version
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKey]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1924
  def update_crypto_key_primary_version(request, options = T.unsafe(nil)); end

  # Update a {::Google::Cloud::Kms::V1::CryptoKeyVersion CryptoKeyVersion}'s
  # metadata.
  #
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion#state state} may be changed between
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::ENABLED ENABLED}
  # and
  # {::Google::Cloud::Kms::V1::CryptoKeyVersion::CryptoKeyVersionState::DISABLED DISABLED}
  # using this method. See
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#destroy_crypto_key_version DestroyCryptoKeyVersion}
  # and
  # {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client#restore_crypto_key_version RestoreCryptoKeyVersion}
  # to move between other states.
  #
  # @example Basic example
  #   require "google/cloud/kms/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Kms::V1::UpdateCryptoKeyVersionRequest.new
  #
  #   # Call the update_crypto_key_version method.
  #   result = client.update_crypto_key_version request
  #
  #   # The returned object is of type Google::Cloud::Kms::V1::CryptoKeyVersion.
  #   p result
  # @overload update_crypto_key_version
  # @overload update_crypto_key_version
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#1836
  def update_crypto_key_version(request, options = T.unsafe(nil)); end

  class << self
    # Configure the KeyManagementService Client class.
    #
    # See {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all KeyManagementService clients
    #   ::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#77
    def configure; end
  end
end

# @private
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#49
Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::API_VERSION = T.let(T.unsafe(nil), String)

# Configuration class for the KeyManagementService REST API.
#
# This class represents the configuration for KeyManagementService REST,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_key_rings to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_key_rings.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::Kms::V1::KeyManagementService::Rest::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_key_rings.timeout = 20.0
#   end
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3387
class Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3416
  def initialize(parent_config = T.unsafe(nil)); end

  # Overrides for http bindings for the RPCs of this service
  # are only used when this service is used as mixin, and only
  # by the host service.
  #
  # @private
  # @return [::Hash{::Symbol=>::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def bindings_override; end

  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def bindings_override=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def endpoint; end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3426
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def timeout=(new_value); end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def universe_domain; end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def universe_domain=(new_value); end
end

# The endpoint specific to the default "googleapis.com" universe. Deprecated.
#
# @private
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3392
Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::Configuration::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)

# Configuration RPC class for the KeyManagementService API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3451
class Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3594
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `asymmetric_decrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3576
  def asymmetric_decrypt; end

  # RPC-specific configuration for `asymmetric_sign`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3571
  def asymmetric_sign; end

  # RPC-specific configuration for `create_crypto_key`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3506
  def create_crypto_key; end

  # RPC-specific configuration for `create_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3511
  def create_crypto_key_version; end

  # RPC-specific configuration for `create_import_job`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3521
  def create_import_job; end

  # RPC-specific configuration for `create_key_ring`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3501
  def create_key_ring; end

  # RPC-specific configuration for `decrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3556
  def decrypt; end

  # RPC-specific configuration for `destroy_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3541
  def destroy_crypto_key_version; end

  # RPC-specific configuration for `encrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3551
  def encrypt; end

  # RPC-specific configuration for `generate_random_bytes`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3591
  def generate_random_bytes; end

  # RPC-specific configuration for `get_crypto_key`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3481
  def get_crypto_key; end

  # RPC-specific configuration for `get_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3486
  def get_crypto_key_version; end

  # RPC-specific configuration for `get_import_job`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3496
  def get_import_job; end

  # RPC-specific configuration for `get_key_ring`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3476
  def get_key_ring; end

  # RPC-specific configuration for `get_public_key`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3491
  def get_public_key; end

  # RPC-specific configuration for `import_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3516
  def import_crypto_key_version; end

  # RPC-specific configuration for `list_crypto_key_versions`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3466
  def list_crypto_key_versions; end

  # RPC-specific configuration for `list_crypto_keys`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3461
  def list_crypto_keys; end

  # RPC-specific configuration for `list_import_jobs`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3471
  def list_import_jobs; end

  # RPC-specific configuration for `list_key_rings`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3456
  def list_key_rings; end

  # RPC-specific configuration for `mac_sign`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3581
  def mac_sign; end

  # RPC-specific configuration for `mac_verify`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3586
  def mac_verify; end

  # RPC-specific configuration for `raw_decrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3566
  def raw_decrypt; end

  # RPC-specific configuration for `raw_encrypt`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3561
  def raw_encrypt; end

  # RPC-specific configuration for `restore_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3546
  def restore_crypto_key_version; end

  # RPC-specific configuration for `update_crypto_key`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3526
  def update_crypto_key; end

  # RPC-specific configuration for `update_crypto_key_primary_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3536
  def update_crypto_key_primary_version; end

  # RPC-specific configuration for `update_crypto_key_version`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#3531
  def update_crypto_key_version; end
end

# @private
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/client.rb#52
Google::Cloud::Kms::V1::KeyManagementService::Rest::Client::DEFAULT_ENDPOINT_TEMPLATE = T.let(T.unsafe(nil), String)

# REST service stub for the KeyManagementService service.
# Service stub contains baseline method implementations
# including transcoding, making the REST call, and deserialing the response.
#
# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#32
class Google::Cloud::Kms::V1::KeyManagementService::Rest::ServiceStub
  # @return [ServiceStub] a new instance of ServiceStub
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#33
  def initialize(endpoint:, endpoint_template:, universe_domain:, credentials:); end

  # Baseline implementation for the asymmetric_decrypt REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::AsymmetricDecryptRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::AsymmetricDecryptResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::AsymmetricDecryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#990
  def asymmetric_decrypt(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the asymmetric_sign REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::AsymmetricSignRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::AsymmetricSignResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::AsymmetricSignResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#952
  def asymmetric_sign(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the create_crypto_key REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::CreateCryptoKeyRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKey] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#458
  def create_crypto_key(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the create_crypto_key_version REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::CreateCryptoKeyVersionRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#496
  def create_crypto_key_version(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the create_import_job REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::CreateImportJobRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::ImportJob] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::ImportJob]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#572
  def create_import_job(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the create_key_ring REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::CreateKeyRingRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::KeyRing] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::KeyRing]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#420
  def create_key_ring(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the decrypt REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::DecryptRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::DecryptResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::DecryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#838
  def decrypt(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the destroy_crypto_key_version REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::DestroyCryptoKeyVersionRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#724
  def destroy_crypto_key_version(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the encrypt REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::EncryptRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::EncryptResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::EncryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#800
  def encrypt(request_pb, options = T.unsafe(nil)); end

  # The effective endpoint
  #
  # @return [String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#60
  def endpoint; end

  # Baseline implementation for the generate_random_bytes REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::GenerateRandomBytesRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::GenerateRandomBytesResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::GenerateRandomBytesResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1104
  def generate_random_bytes(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the get_crypto_key REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::GetCryptoKeyRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKey] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#268
  def get_crypto_key(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the get_crypto_key_version REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::GetCryptoKeyVersionRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#306
  def get_crypto_key_version(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the get_import_job REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::GetImportJobRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::ImportJob] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::ImportJob]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#382
  def get_import_job(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the get_key_ring REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::GetKeyRingRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::KeyRing] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::KeyRing]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#230
  def get_key_ring(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the get_public_key REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::GetPublicKeyRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::PublicKey] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::PublicKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#344
  def get_public_key(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the import_crypto_key_version REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::ImportCryptoKeyVersionRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#534
  def import_crypto_key_version(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the list_crypto_key_versions REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::ListCryptoKeyVersionsRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::ListCryptoKeyVersionsResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::ListCryptoKeyVersionsResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#154
  def list_crypto_key_versions(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the list_crypto_keys REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::ListCryptoKeysRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::ListCryptoKeysResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::ListCryptoKeysResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#116
  def list_crypto_keys(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the list_import_jobs REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::ListImportJobsRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::ListImportJobsResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::ListImportJobsResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#192
  def list_import_jobs(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the list_key_rings REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::ListKeyRingsRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::ListKeyRingsResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::ListKeyRingsResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#78
  def list_key_rings(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the mac_sign REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::MacSignRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::MacSignResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::MacSignResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1028
  def mac_sign(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the mac_verify REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::MacVerifyRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::MacVerifyResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::MacVerifyResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1066
  def mac_verify(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the raw_decrypt REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::RawDecryptRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::RawDecryptResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::RawDecryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#914
  def raw_decrypt(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the raw_encrypt REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::RawEncryptRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::RawEncryptResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::RawEncryptResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#876
  def raw_encrypt(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the restore_crypto_key_version REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::RestoreCryptoKeyVersionRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#762
  def restore_crypto_key_version(request_pb, options = T.unsafe(nil)); end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#51
  def universe_domain; end

  # Baseline implementation for the update_crypto_key REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::UpdateCryptoKeyRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKey] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#610
  def update_crypto_key(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the update_crypto_key_primary_version REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::UpdateCryptoKeyPrimaryVersionRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKey] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKey]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#686
  def update_crypto_key_primary_version(request_pb, options = T.unsafe(nil)); end

  # Baseline implementation for the update_crypto_key_version REST call
  #
  # @param request_pb [::Google::Cloud::Kms::V1::UpdateCryptoKeyVersionRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Kms::V1::CryptoKeyVersion] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Kms::V1::CryptoKeyVersion]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#648
  def update_crypto_key_version(request_pb, options = T.unsafe(nil)); end

  class << self
    # GRPC transcoding helper method for the asymmetric_decrypt REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::AsymmetricDecryptRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1656
    def transcode_asymmetric_decrypt_request(request_pb); end

    # GRPC transcoding helper method for the asymmetric_sign REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::AsymmetricSignRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1634
    def transcode_asymmetric_sign_request(request_pb); end

    # GRPC transcoding helper method for the create_crypto_key REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::CreateCryptoKeyRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1348
    def transcode_create_crypto_key_request(request_pb); end

    # GRPC transcoding helper method for the create_crypto_key_version REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::CreateCryptoKeyVersionRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1370
    def transcode_create_crypto_key_version_request(request_pb); end

    # GRPC transcoding helper method for the create_import_job REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::CreateImportJobRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1414
    def transcode_create_import_job_request(request_pb); end

    # GRPC transcoding helper method for the create_key_ring REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::CreateKeyRingRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1326
    def transcode_create_key_ring_request(request_pb); end

    # GRPC transcoding helper method for the decrypt REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::DecryptRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1568
    def transcode_decrypt_request(request_pb); end

    # GRPC transcoding helper method for the destroy_crypto_key_version REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::DestroyCryptoKeyVersionRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1502
    def transcode_destroy_crypto_key_version_request(request_pb); end

    # GRPC transcoding helper method for the encrypt REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::EncryptRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1546
    def transcode_encrypt_request(request_pb); end

    # GRPC transcoding helper method for the generate_random_bytes REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::GenerateRandomBytesRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1722
    def transcode_generate_random_bytes_request(request_pb); end

    # GRPC transcoding helper method for the get_crypto_key REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::GetCryptoKeyRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1242
    def transcode_get_crypto_key_request(request_pb); end

    # GRPC transcoding helper method for the get_crypto_key_version REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::GetCryptoKeyVersionRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1263
    def transcode_get_crypto_key_version_request(request_pb); end

    # GRPC transcoding helper method for the get_import_job REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::GetImportJobRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1305
    def transcode_get_import_job_request(request_pb); end

    # GRPC transcoding helper method for the get_key_ring REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::GetKeyRingRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1221
    def transcode_get_key_ring_request(request_pb); end

    # GRPC transcoding helper method for the get_public_key REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::GetPublicKeyRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1284
    def transcode_get_public_key_request(request_pb); end

    # GRPC transcoding helper method for the import_crypto_key_version REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::ImportCryptoKeyVersionRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1392
    def transcode_import_crypto_key_version_request(request_pb); end

    # GRPC transcoding helper method for the list_crypto_key_versions REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::ListCryptoKeyVersionsRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1179
    def transcode_list_crypto_key_versions_request(request_pb); end

    # GRPC transcoding helper method for the list_crypto_keys REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::ListCryptoKeysRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1158
    def transcode_list_crypto_keys_request(request_pb); end

    # GRPC transcoding helper method for the list_import_jobs REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::ListImportJobsRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1200
    def transcode_list_import_jobs_request(request_pb); end

    # GRPC transcoding helper method for the list_key_rings REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::ListKeyRingsRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1137
    def transcode_list_key_rings_request(request_pb); end

    # GRPC transcoding helper method for the mac_sign REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::MacSignRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1678
    def transcode_mac_sign_request(request_pb); end

    # GRPC transcoding helper method for the mac_verify REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::MacVerifyRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1700
    def transcode_mac_verify_request(request_pb); end

    # GRPC transcoding helper method for the raw_decrypt REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::RawDecryptRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1612
    def transcode_raw_decrypt_request(request_pb); end

    # GRPC transcoding helper method for the raw_encrypt REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::RawEncryptRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1590
    def transcode_raw_encrypt_request(request_pb); end

    # GRPC transcoding helper method for the restore_crypto_key_version REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::RestoreCryptoKeyVersionRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1524
    def transcode_restore_crypto_key_version_request(request_pb); end

    # GRPC transcoding helper method for the update_crypto_key_primary_version REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::UpdateCryptoKeyPrimaryVersionRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1480
    def transcode_update_crypto_key_primary_version_request(request_pb); end

    # GRPC transcoding helper method for the update_crypto_key REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::UpdateCryptoKeyRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1436
    def transcode_update_crypto_key_request(request_pb); end

    # GRPC transcoding helper method for the update_crypto_key_version REST call
    #
    # @param request_pb [::Google::Cloud::Kms::V1::UpdateCryptoKeyVersionRequest] A request object representing the call parameters. Required.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-kms-v1//lib/google/cloud/kms/v1/key_management_service/rest/service_stub.rb#1458
    def transcode_update_crypto_key_version_request(request_pb); end
  end
end

class Google::Cloud::Kms::V1::KeyOperationAttestation < ::Google::Protobuf::AbstractMessage; end

module Google::Cloud::Kms::V1::KeyOperationAttestation::AttestationFormat
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#53
Google::Cloud::Kms::V1::KeyOperationAttestation::AttestationFormat::ATTESTATION_FORMAT_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#53
Google::Cloud::Kms::V1::KeyOperationAttestation::AttestationFormat::CAVIUM_V1_COMPRESSED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#53
Google::Cloud::Kms::V1::KeyOperationAttestation::AttestationFormat::CAVIUM_V2_COMPRESSED = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Kms::V1::KeyOperationAttestation::CertificateChains < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::KeyRing < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ListCryptoKeyVersionsRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ListCryptoKeyVersionsResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ListCryptoKeysRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ListCryptoKeysResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ListImportJobsRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ListImportJobsResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ListKeyRingsRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::ListKeyRingsResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::LocationMetadata < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::MacSignRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::MacSignResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::MacVerifyRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::MacVerifyResponse < ::Google::Protobuf::AbstractMessage; end

module Google::Cloud::Kms::V1::ProtectionLevel
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#65
Google::Cloud::Kms::V1::ProtectionLevel::EXTERNAL = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#65
Google::Cloud::Kms::V1::ProtectionLevel::EXTERNAL_VPC = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#65
Google::Cloud::Kms::V1::ProtectionLevel::HSM = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#65
Google::Cloud::Kms::V1::ProtectionLevel::PROTECTION_LEVEL_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/resources_pb.rb#65
Google::Cloud::Kms::V1::ProtectionLevel::SOFTWARE = T.let(T.unsafe(nil), Integer)

class Google::Cloud::Kms::V1::PublicKey < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::RawDecryptRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::RawDecryptResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::RawEncryptRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::RawEncryptResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::RestoreCryptoKeyVersionRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::UpdateCryptoKeyPrimaryVersionRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::UpdateCryptoKeyRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Kms::V1::UpdateCryptoKeyVersionRequest < ::Google::Protobuf::AbstractMessage; end

# source://google-cloud-kms-v1//lib/google/cloud/kms/v1/version.rb#24
Google::Cloud::Kms::V1::VERSION = T.let(T.unsafe(nil), String)
