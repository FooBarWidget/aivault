# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-iam-v1` gem.
# Please instead update this file by running `bin/tapioca gem google-iam-v1`.


# source://google-iam-v1//lib/google/iam/v1/version.rb#20
module Google; end

# source://google-iam-v1//lib/google/iam/v1/version.rb#21
module Google::Iam; end

# API client module.
#
# @example Load this package, including all its services, and instantiate a gRPC client
#
#   require "google/iam/v1"
#   client = ::Google::Iam::V1::IAMPolicy::Client.new
# @example Load this package, including all its services, and instantiate a REST client
#
#   require "google/iam/v1"
#   client = ::Google::Iam::V1::IAMPolicy::Rest::Client.new
#
# source://google-iam-v1//lib/google/iam/v1/version.rb#22
module Google::Iam::V1; end

class Google::Iam::V1::AuditConfig < ::Google::Protobuf::AbstractMessage; end
class Google::Iam::V1::AuditConfigDelta < ::Google::Protobuf::AbstractMessage; end

module Google::Iam::V1::AuditConfigDelta::Action
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#49
Google::Iam::V1::AuditConfigDelta::Action::ACTION_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#49
Google::Iam::V1::AuditConfigDelta::Action::ADD = T.let(T.unsafe(nil), Integer)

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#49
Google::Iam::V1::AuditConfigDelta::Action::REMOVE = T.let(T.unsafe(nil), Integer)

class Google::Iam::V1::AuditLogConfig < ::Google::Protobuf::AbstractMessage; end

module Google::Iam::V1::AuditLogConfig::LogType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#44
Google::Iam::V1::AuditLogConfig::LogType::ADMIN_READ = T.let(T.unsafe(nil), Integer)

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#44
Google::Iam::V1::AuditLogConfig::LogType::DATA_READ = T.let(T.unsafe(nil), Integer)

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#44
Google::Iam::V1::AuditLogConfig::LogType::DATA_WRITE = T.let(T.unsafe(nil), Integer)

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#44
Google::Iam::V1::AuditLogConfig::LogType::LOG_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Google::Iam::V1::Binding < ::Google::Protobuf::AbstractMessage; end
class Google::Iam::V1::BindingDelta < ::Google::Protobuf::AbstractMessage; end

module Google::Iam::V1::BindingDelta::Action
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#47
Google::Iam::V1::BindingDelta::Action::ACTION_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#47
Google::Iam::V1::BindingDelta::Action::ADD = T.let(T.unsafe(nil), Integer)

# source://google-iam-v1//lib/google/iam/v1/policy_pb.rb#47
Google::Iam::V1::BindingDelta::Action::REMOVE = T.let(T.unsafe(nil), Integer)

class Google::Iam::V1::GetIamPolicyRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Iam::V1::GetPolicyOptions < ::Google::Protobuf::AbstractMessage; end

# API Overview
#
#
# Manages Identity and Access Management (IAM) policies.
#
# Any implementation of an API that offers access control features
# implements the google.iam.v1.IAMPolicy interface.
#
# ## Data model
#
# Access control is applied when a principal (user or service account), takes
# some action on a resource exposed by a service. Resources, identified by
# URI-like names, are the unit of access control specification. Service
# implementations can choose the granularity of access control and the
# supported permissions for their resources.
# For example one database service may allow access control to be
# specified only at the Table level, whereas another might allow access control
# to also be specified at the Column level.
#
# ## Policy Structure
#
# See google.iam.v1.Policy
#
# This is intentionally not a CRUD style API because access control policies
# are created and deleted implicitly with the resources to which they are
# attached.
#
# @example Load this service and instantiate a gRPC client
#
#   require "google/iam/v1/iam_policy"
#   client = ::Google::Iam::V1::IAMPolicy::Client.new
# @example Load this service and instantiate a REST client
#
#   require "google/iam/v1/iam_policy/rest"
#   client = ::Google::Iam::V1::IAMPolicy::Rest::Client.new
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/credentials.rb#24
module Google::Iam::V1::IAMPolicy; end

# Client for the IAMPolicy service.
#
# API Overview
#
#
# Manages Identity and Access Management (IAM) policies.
#
# Any implementation of an API that offers access control features
# implements the google.iam.v1.IAMPolicy interface.
#
# ## Data model
#
# Access control is applied when a principal (user or service account), takes
# some action on a resource exposed by a service. Resources, identified by
# URI-like names, are the unit of access control specification. Service
# implementations can choose the granularity of access control and the
# supported permissions for their resources.
# For example one database service may allow access control to be
# specified only at the Table level, whereas another might allow access control
# to also be specified at the Column level.
#
# ## Policy Structure
#
# See google.iam.v1.Policy
#
# This is intentionally not a CRUD style API because access control policies
# are created and deleted implicitly with the resources to which they are
# attached.
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#56
class Google::Iam::V1::IAMPolicy::Client
  # Create a new IAMPolicy client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Iam::V1::IAMPolicy::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Iam::V1::IAMPolicy::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the IAMPolicy client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#146
  def initialize; end

  # Configure the IAMPolicy Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Iam::V1::IAMPolicy::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#116
  def configure; end

  # Gets the access control policy for a resource.
  # Returns an empty policy if the resource exists and does not have a policy
  # set.
  #
  # @example Basic example
  #   require "google/iam/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Iam::V1::IAMPolicy::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Iam::V1::GetIamPolicyRequest.new
  #
  #   # Call the get_iam_policy method.
  #   result = client.get_iam_policy request
  #
  #   # The returned object is of type Google::Iam::V1::Policy.
  #   p result
  # @overload get_iam_policy
  # @overload get_iam_policy
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Iam::V1::Policy]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Iam::V1::Policy]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#339
  def get_iam_policy(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#64
  def iam_policy_stub; end

  # Sets the access control policy on the specified resource. Replaces any
  # existing policy.
  #
  # Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
  #
  # @example Basic example
  #   require "google/iam/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Iam::V1::IAMPolicy::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Iam::V1::SetIamPolicyRequest.new
  #
  #   # Call the set_iam_policy method.
  #   result = client.set_iam_policy request
  #
  #   # The returned object is of type Google::Iam::V1::Policy.
  #   p result
  # @overload set_iam_policy
  # @overload set_iam_policy
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Iam::V1::Policy]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Iam::V1::Policy]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#247
  def set_iam_policy(request, options = T.unsafe(nil)); end

  # Returns permissions that a caller has on the specified resource.
  # If the resource does not exist, this will return an empty set of
  # permissions, not a `NOT_FOUND` error.
  #
  # Note: This operation is designed to be used for building permission-aware
  # UIs and command-line tools, not for authorization checking. This operation
  # may "fail open" without warning.
  #
  # @example Basic example
  #   require "google/iam/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Iam::V1::IAMPolicy::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Iam::V1::TestIamPermissionsRequest.new
  #
  #   # Call the test_iam_permissions method.
  #   result = client.test_iam_permissions request
  #
  #   # The returned object is of type Google::Iam::V1::TestIamPermissionsResponse.
  #   p result
  # @overload test_iam_permissions
  # @overload test_iam_permissions
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Iam::V1::TestIamPermissionsResponse]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Iam::V1::TestIamPermissionsResponse]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#437
  def test_iam_permissions(request, options = T.unsafe(nil)); end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#126
  def universe_domain; end

  class << self
    # Configure the IAMPolicy Client class.
    #
    # See {::Google::Iam::V1::IAMPolicy::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all IAMPolicy clients
    #   ::Google::Iam::V1::IAMPolicy::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#84
    def configure; end
  end
end

# @private
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#58
Google::Iam::V1::IAMPolicy::Client::API_VERSION = T.let(T.unsafe(nil), String)

# Configuration class for the IAMPolicy API.
#
# This class represents the configuration for IAMPolicy,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Iam::V1::IAMPolicy::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # set_iam_policy to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Iam::V1::IAMPolicy::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.set_iam_policy.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Iam::V1::IAMPolicy::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.set_iam_policy.timeout = 20.0
#   end
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#563
class Google::Iam::V1::IAMPolicy::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Iam::V1::IAMPolicy::Client::Configuration] the object that the method was called on
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#588
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Configuration for the channel pool
  #
  # @return [::Gapic::ServiceStub::ChannelPool::Configuration]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#610
  def channel_pool; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def endpoint; end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#598
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def timeout=(new_value); end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def universe_domain; end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def universe_domain=(new_value); end
end

# The endpoint specific to the default "googleapis.com" universe. Deprecated.
#
# @private
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#568
Google::Iam::V1::IAMPolicy::Client::Configuration::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)

# Configuration RPC class for the IAMPolicy API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#631
class Google::Iam::V1::IAMPolicy::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Iam::V1::IAMPolicy::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#649
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `get_iam_policy`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#641
  def get_iam_policy; end

  # RPC-specific configuration for `set_iam_policy`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#636
  def set_iam_policy; end

  # RPC-specific configuration for `test_iam_permissions`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#646
  def test_iam_permissions; end
end

# @private
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/client.rb#61
Google::Iam::V1::IAMPolicy::Client::DEFAULT_ENDPOINT_TEMPLATE = T.let(T.unsafe(nil), String)

# Credentials for the IAMPolicy API.
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/credentials.rb#26
class Google::Iam::V1::IAMPolicy::Credentials < ::Google::Auth::Credentials; end

# Client for the REST transport
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#25
module Google::Iam::V1::IAMPolicy::Rest; end

# REST client for the IAMPolicy service.
#
# API Overview
#
#
# Manages Identity and Access Management (IAM) policies.
#
# Any implementation of an API that offers access control features
# implements the google.iam.v1.IAMPolicy interface.
#
# ## Data model
#
# Access control is applied when a principal (user or service account), takes
# some action on a resource exposed by a service. Resources, identified by
# URI-like names, are the unit of access control specification. Service
# implementations can choose the granularity of access control and the
# supported permissions for their resources.
# For example one database service may allow access control to be
# specified only at the Table level, whereas another might allow access control
# to also be specified at the Column level.
#
# ## Policy Structure
#
# See google.iam.v1.Policy
#
# This is intentionally not a CRUD style API because access control policies
# are created and deleted implicitly with the resources to which they are
# attached.
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#58
class Google::Iam::V1::IAMPolicy::Rest::Client
  # Create a new IAMPolicy REST client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Iam::V1::IAMPolicy::Rest::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Iam::V1::IAMPolicy::Rest::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the IAMPolicy client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#148
  def initialize; end

  # Configure the IAMPolicy Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Iam::V1::IAMPolicy::Rest::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#118
  def configure; end

  # Gets the access control policy for a resource.
  # Returns an empty policy if the resource exists and does not have a policy
  # set.
  #
  # @example Basic example
  #   require "google/iam/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Iam::V1::IAMPolicy::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Iam::V1::GetIamPolicyRequest.new
  #
  #   # Call the get_iam_policy method.
  #   result = client.get_iam_policy request
  #
  #   # The returned object is of type Google::Iam::V1::Policy.
  #   p result
  # @overload get_iam_policy
  # @overload get_iam_policy
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Iam::V1::Policy]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Iam::V1::Policy]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#326
  def get_iam_policy(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#66
  def iam_policy_stub; end

  # Sets the access control policy on the specified resource. Replaces any
  # existing policy.
  #
  # Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
  #
  # @example Basic example
  #   require "google/iam/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Iam::V1::IAMPolicy::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Iam::V1::SetIamPolicyRequest.new
  #
  #   # Call the set_iam_policy method.
  #   result = client.set_iam_policy request
  #
  #   # The returned object is of type Google::Iam::V1::Policy.
  #   p result
  # @overload set_iam_policy
  # @overload set_iam_policy
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Iam::V1::Policy]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Iam::V1::Policy]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#239
  def set_iam_policy(request, options = T.unsafe(nil)); end

  # Returns permissions that a caller has on the specified resource.
  # If the resource does not exist, this will return an empty set of
  # permissions, not a `NOT_FOUND` error.
  #
  # Note: This operation is designed to be used for building permission-aware
  # UIs and command-line tools, not for authorization checking. This operation
  # may "fail open" without warning.
  #
  # @example Basic example
  #   require "google/iam/v1"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Iam::V1::IAMPolicy::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Iam::V1::TestIamPermissionsRequest.new
  #
  #   # Call the test_iam_permissions method.
  #   result = client.test_iam_permissions request
  #
  #   # The returned object is of type Google::Iam::V1::TestIamPermissionsResponse.
  #   p result
  # @overload test_iam_permissions
  # @overload test_iam_permissions
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Iam::V1::TestIamPermissionsResponse]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Iam::V1::TestIamPermissionsResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#419
  def test_iam_permissions(request, options = T.unsafe(nil)); end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#128
  def universe_domain; end

  class << self
    # Configure the IAMPolicy Client class.
    #
    # See {::Google::Iam::V1::IAMPolicy::Rest::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all IAMPolicy clients
    #   ::Google::Iam::V1::IAMPolicy::Rest::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#86
    def configure; end
  end
end

# @private
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#60
Google::Iam::V1::IAMPolicy::Rest::Client::API_VERSION = T.let(T.unsafe(nil), String)

# Configuration class for the IAMPolicy REST API.
#
# This class represents the configuration for IAMPolicy REST,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Iam::V1::IAMPolicy::Rest::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # set_iam_policy to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Iam::V1::IAMPolicy::Rest::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.set_iam_policy.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Iam::V1::IAMPolicy::Rest::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.set_iam_policy.timeout = 20.0
#   end
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#532
class Google::Iam::V1::IAMPolicy::Rest::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Iam::V1::IAMPolicy::Rest::Client::Configuration] the object that the method was called on
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#561
  def initialize(parent_config = T.unsafe(nil)); end

  # Overrides for http bindings for the RPCs of this service
  # are only used when this service is used as mixin, and only
  # by the host service.
  #
  # @private
  # @return [::Hash{::Symbol=>::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def bindings_override; end

  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def bindings_override=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def endpoint; end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#571
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def timeout=(new_value); end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def universe_domain; end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def universe_domain=(new_value); end
end

# The endpoint specific to the default "googleapis.com" universe. Deprecated.
#
# @private
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#537
Google::Iam::V1::IAMPolicy::Rest::Client::Configuration::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)

# Configuration RPC class for the IAMPolicy API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#596
class Google::Iam::V1::IAMPolicy::Rest::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Iam::V1::IAMPolicy::Rest::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#614
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `get_iam_policy`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#606
  def get_iam_policy; end

  # RPC-specific configuration for `set_iam_policy`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#601
  def set_iam_policy; end

  # RPC-specific configuration for `test_iam_permissions`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#611
  def test_iam_permissions; end
end

# @private
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/client.rb#63
Google::Iam::V1::IAMPolicy::Rest::Client::DEFAULT_ENDPOINT_TEMPLATE = T.let(T.unsafe(nil), String)

# REST service stub for the IAMPolicy service.
# Service stub contains baseline method implementations
# including transcoding, making the REST call, and deserialing the response.
#
# source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#31
class Google::Iam::V1::IAMPolicy::Rest::ServiceStub
  # @return [ServiceStub] a new instance of ServiceStub
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#32
  def initialize(endpoint:, endpoint_template:, universe_domain:, credentials:); end

  # The effective endpoint
  #
  # @return [String]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#59
  def endpoint; end

  # Baseline implementation for the get_iam_policy REST call
  #
  # @param request_pb [::Google::Iam::V1::GetIamPolicyRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding. Only used internally.
  # @raise [::ArgumentError]
  # @return [::Google::Iam::V1::Policy] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Iam::V1::Policy]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#119
  def get_iam_policy(request_pb, options = T.unsafe(nil), bindings_override: T.unsafe(nil)); end

  # Baseline implementation for the set_iam_policy REST call
  #
  # @param request_pb [::Google::Iam::V1::SetIamPolicyRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding. Only used internally.
  # @raise [::ArgumentError]
  # @return [::Google::Iam::V1::Policy] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Iam::V1::Policy]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#79
  def set_iam_policy(request_pb, options = T.unsafe(nil), bindings_override: T.unsafe(nil)); end

  # Baseline implementation for the test_iam_permissions REST call
  #
  # @param request_pb [::Google::Iam::V1::TestIamPermissionsRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding. Only used internally.
  # @raise [::ArgumentError]
  # @return [::Google::Iam::V1::TestIamPermissionsResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Iam::V1::TestIamPermissionsResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#159
  def test_iam_permissions(request_pb, options = T.unsafe(nil), bindings_override: T.unsafe(nil)); end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#50
  def universe_domain; end

  class << self
    # GRPC transcoding helper method for the get_iam_policy REST call
    #
    # @param request_pb [::Google::Iam::V1::GetIamPolicyRequest] A request object representing the call parameters. Required.
    # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#219
    def transcode_get_iam_policy_request(request_pb, bindings_override: T.unsafe(nil)); end

    # GRPC transcoding helper method for the set_iam_policy REST call
    #
    # @param request_pb [::Google::Iam::V1::SetIamPolicyRequest] A request object representing the call parameters. Required.
    # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#194
    def transcode_set_iam_policy_request(request_pb, bindings_override: T.unsafe(nil)); end

    # GRPC transcoding helper method for the test_iam_permissions REST call
    #
    # @param request_pb [::Google::Iam::V1::TestIamPermissionsRequest] A request object representing the call parameters. Required.
    # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-iam-v1//lib/google/iam/v1/iam_policy/rest/service_stub.rb#244
    def transcode_test_iam_permissions_request(request_pb, bindings_override: T.unsafe(nil)); end
  end
end

class Google::Iam::V1::Policy < ::Google::Protobuf::AbstractMessage; end
class Google::Iam::V1::PolicyDelta < ::Google::Protobuf::AbstractMessage; end
class Google::Iam::V1::SetIamPolicyRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Iam::V1::TestIamPermissionsRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Iam::V1::TestIamPermissionsResponse < ::Google::Protobuf::AbstractMessage; end

# source://google-iam-v1//lib/google/iam/v1/version.rb#23
Google::Iam::V1::VERSION = T.let(T.unsafe(nil), String)
