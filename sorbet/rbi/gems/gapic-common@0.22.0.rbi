# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gapic-common` gem.
# Please instead update this file by running `bin/tapioca gem gapic-common`.


# source://gapic-common//lib/gapic/config.rb#15
module Gapic; end

# Encapsulates the overridable settings for a particular RPC call.
#
# source://gapic-common//lib/gapic/call_options/error_codes.rb#16
class Gapic::CallOptions
  # Create a new Options object instance.
  #
  # @param timeout [Numeric] The client-side timeout for RPC calls.
  # @param metadata [Hash] The request header params.
  # @param retry_policy [Hash, RetryPolicy, Proc] The policy for error retry. A Hash can be provided to
  #   customize the policy object, using keys that match the arguments for {RetryPolicy.initialize}.
  #
  #   A Proc object can also be provided. The Proc should accept an error as an argument, and return `true` if the
  #   error should be retried or `false` if not. If the error is to be retried, the Proc object must also block
  #   with an incremental delay before returning `true`.
  # @return [CallOptions] a new instance of CallOptions
  #
  # source://gapic-common//lib/gapic/call_options.rb#46
  def initialize(timeout: T.unsafe(nil), metadata: T.unsafe(nil), retry_policy: T.unsafe(nil)); end

  # @private Equality test
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options.rb#97
  def ==(other); end

  # Apply default values to the options object. This does not replace user-provided values, it only overrides
  # empty values.
  #
  # @param timeout [Numeric] The client-side timeout for RPC calls.
  # @param metadata [Hash] the request header params.
  # @param retry_policy [Hash] The policy for error retry. keys must match the arguments for
  #   {RetryPolicy.initialize}.
  # @private
  #
  # source://gapic-common//lib/gapic/call_options.rb#65
  def apply_defaults(timeout: T.unsafe(nil), metadata: T.unsafe(nil), retry_policy: T.unsafe(nil)); end

  # @private Equality test
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options.rb#97
  def eql?(other); end

  # @private Hash code
  #
  # source://gapic-common//lib/gapic/call_options.rb#106
  def hash; end

  # Return a new CallOptions with the given modifications. The current object
  # is not modified.
  #
  # @param kwargs [keywords] Updated fields. See {#initialize} for details.
  # @return [CallOptions] A new CallOptions object.
  #
  # source://gapic-common//lib/gapic/call_options.rb#91
  def merge(**kwargs); end

  # @return [Hash]
  #
  # source://gapic-common//lib/gapic/call_options.rb#31
  def metadata; end

  # @return [RetryPolicy, Object]
  #
  # source://gapic-common//lib/gapic/call_options.rb#32
  def retry_policy; end

  # @return [Numeric, nil]
  #
  # source://gapic-common//lib/gapic/call_options.rb#30
  def timeout; end

  # Convert to hash form.
  #
  # @return [Hash]
  #
  # source://gapic-common//lib/gapic/call_options.rb#76
  def to_h; end
end

# The gRPC error codes and their HTTP mapping
#
# @private
#
# source://gapic-common//lib/gapic/call_options/error_codes.rb#21
module Gapic::CallOptions::ErrorCodes
  class << self
    # Converts http error codes into corresponding gRPC ones
    #
    # @private
    #
    # source://gapic-common//lib/gapic/call_options/error_codes.rb#66
    def grpc_error_for(http_error_code); end
  end
end

# @private
#
# source://gapic-common//lib/gapic/call_options/error_codes.rb#46
Gapic::CallOptions::ErrorCodes::ERROR_STRING_MAPPING = T.let(T.unsafe(nil), Hash)

# @private
#
# source://gapic-common//lib/gapic/call_options/error_codes.rb#49
Gapic::CallOptions::ErrorCodes::HTTP_GRPC_CODE_MAP = T.let(T.unsafe(nil), Hash)

# The policy for retrying failed RPC calls using an incremental backoff. A new object instance should be used for
# every RpcCall invocation.
#
# Only errors orginating from GRPC will be retried.
#
# source://gapic-common//lib/gapic/call_options/retry_policy.rb#25
class Gapic::CallOptions::RetryPolicy
  # Create new API Call RetryPolicy.
  #
  # @param initial_delay [Numeric] client-side timeout
  # @param multiplier [Numeric] client-side timeout
  # @param max_delay [Numeric] client-side timeout
  # @return [RetryPolicy] a new instance of RetryPolicy
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#33
  def initialize(retry_codes: T.unsafe(nil), initial_delay: T.unsafe(nil), multiplier: T.unsafe(nil), max_delay: T.unsafe(nil)); end

  # @private Equality test
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#92
  def ==(other); end

  # Apply default values to the policy object. This does not replace user-provided values, it only overrides empty
  # values.
  #
  # @param retry_policy [Hash] The policy for error retry. keys must match the arguments for
  #   {RpcCall::RetryPolicy.new}.
  # @private
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#80
  def apply_defaults(retry_policy); end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#63
  def call(error); end

  # The current delay value.
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#59
  def delay; end

  # @private Equality test
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#92
  def eql?(other); end

  # @private Hash code
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#102
  def hash; end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#45
  def initial_delay; end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#53
  def max_delay; end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#49
  def multiplier; end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#41
  def retry_codes; end

  private

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#119
  def convert_codes(input_codes); end

  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#114
  def delay!; end

  # Calculate and set the next delay value.
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#133
  def increment_delay!; end

  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/call_options/retry_policy.rb#108
  def retry?(error); end
end

# The gapic-common gem includes various common libraries for clients built
# with Gapic.
#
# source://gapic-common//lib/gapic/common/error.rb#18
module Gapic::Common; end

# Gapic Common exception class
#
# source://gapic-common//lib/gapic/common/error.rb#20
class Gapic::Common::Error < ::StandardError; end

# source://gapic-common//lib/gapic/common/version.rb#17
Gapic::Common::VERSION = T.let(T.unsafe(nil), String)

# Config is a simple DSL for creating Configuration classes.
#
# @example
#   require "gapic/config"
#
#   class SampleConfig
#   extend Gapic::Config
#
#   config_attr :name,   nil,         String, nil
#   config_attr :active, true,        true, false
#   config_attr :count,  nil,         Numeric, nil
#   config_attr :env,    :production, String, Symbol
#
#   def initialize parent_config = nil
#   @parent_config = parent_config unless parent_config.nil?
#   yield self if block_given?
#   end
#   end
#
#   config = SampleConfig.new
#
#   config.name             #=> nil
#   config.name = "thor"    #=> "thor"
#   config.name             #=> "thor"
#   config.name = :thor     # ArgumentError
#
# source://gapic-common//lib/gapic/config.rb#43
module Gapic::Config
  # Add configuration attribute methods to the configuratin class.
  #
  # @param name [String, Symbol] The name of the option
  # @param default [Object, nil] Initial value (nil is allowed)
  # @param valid_values [Array] A list of valid types
  # @raise [NameError]
  #
  # source://gapic-common//lib/gapic/config.rb#51
  def config_attr(name, default, *valid_values, &validator); end

  private

  # source://gapic-common//lib/gapic/config.rb#69
  def create_getter(name_ivar, name, default); end

  # source://gapic-common//lib/gapic/config.rb#82
  def create_setter(name_ivar, name_setter, default, validator); end
end

# Config::Method is a configuration class that represents the configuration for an API RPC call.
#
# @example
#   require "gapic/config"
#
#   class ServiceConfig
#   extend Gapic::Config
#
#   config_attr :host,     "localhost", String
#   config_attr :port,     443,         Integer
#   config_attr :timeout,  nil,         Numeric, nil
#   config_attr :metadata, nil,         Hash, nil
#
#   attr_reader :rpc_method
#
#   def initialize parent_config = nil
#   @parent_config = parent_config unless parent_config.nil?
#   @rpc_method = Gapic::Config::Method.new
#
#   yield self if block_given?
#   end
#   end
#
#   config = ServiceConfig.new
#
#   config.timeout = 60
#   config.rpc_method.timeout = 120
#
# source://gapic-common//lib/gapic/config/method.rb#46
class Gapic::Config::Method
  extend ::Gapic::Config

  # Create a new Config::Method object instance.
  #
  # @param parent_method [Gapic::Config::Method, nil] The config to look to values for.
  # @return [Method] a new instance of Method
  # @yield [_self]
  # @yieldparam _self [Gapic::Config::Method] the object that the method was called on
  #
  # source://gapic-common//lib/gapic/config/method.rb#58
  def initialize(parent_method = T.unsafe(nil)); end

  # source://gapic-common//lib/gapic/config.rb#70
  def metadata; end

  # source://gapic-common//lib/gapic/config.rb#83
  def metadata=(new_value); end

  # source://gapic-common//lib/gapic/config.rb#70
  def retry_policy; end

  # source://gapic-common//lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # source://gapic-common//lib/gapic/config.rb#70
  def timeout; end

  # source://gapic-common//lib/gapic/config.rb#83
  def timeout=(new_value); end
end

# source://gapic-common//lib/gapic/generic_lro/base_operation.rb#16
module Gapic::GenericLRO; end

# A base class for the wrappers over the long-running operations.
#
# source://gapic-common//lib/gapic/generic_lro/base_operation.rb#23
class Gapic::GenericLRO::BaseOperation
  # @param operation [Object] The operation object to be wrapped
  # @private
  # @return [BaseOperation] a new instance of BaseOperation
  #
  # source://gapic-common//lib/gapic/generic_lro/base_operation.rb#29
  def initialize(operation); end

  # @return [Object] The wrapped operation object.
  #
  # source://gapic-common//lib/gapic/generic_lro/base_operation.rb#24
  def operation; end

  protected

  # Sets the attribute operation
  #
  # @param value the value to set the attribute operation to.
  #
  # source://gapic-common//lib/gapic/generic_lro/base_operation.rb#35
  def operation=(_arg0); end
end

# A collection of common header values.
#
# source://gapic-common//lib/gapic/headers.rb#21
module Gapic::Headers
  class << self
    # @param transports_version_send [Array] Which transports to send versions for.
    #   Allowed values to contain are:
    #   `:grpc` to send the GRPC library version (if defined)
    #   `:rest` to send the REST library version (if defined)
    #   Defaults to `[:grpc]`
    # @param lib_name [String] The client library name.
    # @param lib_version [String] The client library version.
    # @param gax_version [String] The Gapic version. Defaults to `Gapic::Common::VERSION`.
    # @param gapic_version [String] The Gapic version.
    # @param grpc_version [String] The GRPC version. Defaults to `::GRPC::VERSION`.
    # @param rest_version [String] The Rest Library (Faraday) version. Defaults to `Faraday::VERSION`.
    # @param ruby_version [String] The ruby version. Defaults to `RUBY_VERSION`.
    #
    # source://gapic-common//lib/gapic/headers.rb#35
    def x_goog_api_client(ruby_version: T.unsafe(nil), lib_name: T.unsafe(nil), lib_version: T.unsafe(nil), gax_version: T.unsafe(nil), gapic_version: T.unsafe(nil), grpc_version: T.unsafe(nil), rest_version: T.unsafe(nil), protobuf_version: T.unsafe(nil), transports_version_send: T.unsafe(nil)); end
  end
end

# A class used to wrap Google::Longrunning::Operation objects. This class provides helper methods to check the
# status of an Operation
#
# @example Checking Operation status
#   # this example assumes both api_client and operations_client
#   # already exist.
#   require "gapic/operation"
#
#   op = Gapic::Operation.new(
#   api_client.method_that_returns_longrunning_operation(),
#   operations_client,
#   Google::Example::ResultType,
#   Google::Example::MetadataType
#   )
#
#   op.done? # => false
#   op.reload! # => operation completed
#
#   if op.done?
#   results = op.results
#   handle_error(results) if op.error?
#   # Handle results.
#   end
# @example Working with callbacks
#   # this example assumes both api_client and operations_client
#   # already exist.
#   require "gapic/operation"
#
#   op = Gapic::Operation.new(
#   api_client.method_that_returns_longrunning_operation(),
#   operations_client,
#   Google::Example::ResultType,
#   Google::Example::MetadataType
#   )
#
#   # Register a callback to be run when an operation is done.
#   op.on_done do |operation|
#   raise operation.results.message if operation.error?
#   # process(operation.results)
#   # process(operation.metadata)
#   end
#
#   # Reload the operation running callbacks if operation completed.
#   op.reload!
#
#   # Or block until the operation completes, passing a block to be called
#   # on completion.
#   op.wait_until_done! do |operation|
#   raise operation.results.message if operation.error?
#   # process(operation.results)
#   # process(operation.rmetadata)
#   end
#
# source://gapic-common//lib/gapic/operation/retry_policy.rb#16
class Gapic::Operation
  # @param grpc_op [Google::Longrunning::Operation] The inital longrunning operation.
  # @param client [Google::Longrunning::OperationsClient] The client that handles the grpc operations.
  # @param result_type [Class] The class type to be unpacked from the result. If not provided the class type will be
  #   looked up. Optional.
  # @param metadata_type [Class] The class type to be unpacked from the metadata. If not provided the class type
  #   will be looked up. Optional.
  # @param options [Gapic::CallOptions] call options for this operation
  # @return [Operation] a new instance of Operation
  #
  # source://gapic-common//lib/gapic/operation.rb#88
  def initialize(grpc_op, client, result_type: T.unsafe(nil), metadata_type: T.unsafe(nil), options: T.unsafe(nil)); end

  # Cancels the operation.
  #
  # @param options [Gapic::CallOptions, Hash] The options for making the RPC call. A Hash can be provided to customize
  #   the options object, using keys that match the arguments for {Gapic::CallOptions.new}.
  #
  # source://gapic-common//lib/gapic/operation.rb#199
  def cancel(options: T.unsafe(nil)); end

  # Deletes the operation.
  #
  # @param options [Gapic::CallOptions, Hash] The options for making the RPC call. A Hash can be provided to customize
  #   the options object, using keys that match the arguments for {Gapic::CallOptions.new}.
  #
  # source://gapic-common//lib/gapic/operation.rb#212
  def delete(options: T.unsafe(nil)); end

  # Checks if the operation is done. This does not send a new api call, but checks the result of the previous api
  # call to see if done.
  #
  # @return [Boolean] Whether the operation is done.
  #
  # source://gapic-common//lib/gapic/operation.rb#144
  def done?; end

  # If the operation response is an error, the error will be returned, otherwise returns nil.
  #
  # @return [Google::Rpc::Status, nil] The error object.
  #
  # source://gapic-common//lib/gapic/operation.rb#189
  def error; end

  # Checks if the operation is done and the result is an error. If the operation is not finished then this will
  # return false.
  #
  # @return [Boolean] Whether an error has been returned.
  #
  # source://gapic-common//lib/gapic/operation.rb#180
  def error?; end

  # @return [Google::Longrunning::Operation] The wrapped grpc
  #   operation object.
  #
  # source://gapic-common//lib/gapic/operation.rb#77
  def grpc_op; end

  # Returns the metadata of an operation. If a type is provided, the metadata will be unpacked using the type
  # provided; returning nil if the metadata is not of the type provided. If the type is not of provided, the
  # metadata will be unpacked using the metadata's type_url if the type_url is found in the
  # `Google::Protobuf::DescriptorPool.generated_pool`. If the type cannot be found the raw metadata is retuned.
  #
  # @return [Object, nil] The metadata of the operation. Can be nil.
  #
  # source://gapic-common//lib/gapic/operation.rb#126
  def metadata; end

  # Returns the server-assigned name of the operation, which is only unique within the same service that originally
  # returns it. If you use the default HTTP mapping, the name should have the format of operations/some/unique/name.
  #
  # @return [String] The name of the operation.
  #
  # source://gapic-common//lib/gapic/operation.rb#114
  def name; end

  # Registers a callback to be run when a refreshed operation is marked as done. If the operation has completed
  # prior to a call to this function the callback will be called instead of registered.
  #
  # @yieldparam operation [Gapic::Operation] Yields the finished Operation.
  #
  # source://gapic-common//lib/gapic/operation.rb#275
  def on_done(&block); end

  # Reloads the operation object.
  #
  # @param options [Gapic::CallOptions, Hash] The options for making the RPC call. A Hash can be provided to customize
  #   the options object, using keys that match the arguments for {Gapic::CallOptions.new}.
  # @return [Gapic::Operation] Since this method changes internal state, it returns itself.
  #
  # source://gapic-common//lib/gapic/operation.rb#227
  def refresh!(options: T.unsafe(nil)); end

  # Reloads the operation object.
  #
  # @param options [Gapic::CallOptions, Hash] The options for making the RPC call. A Hash can be provided to customize
  #   the options object, using keys that match the arguments for {Gapic::CallOptions.new}.
  # @return [Gapic::Operation] Since this method changes internal state, it returns itself.
  #
  # source://gapic-common//lib/gapic/operation.rb#227
  def reload!(options: T.unsafe(nil)); end

  # If the operation is done, returns the response, otherwise returns nil.
  #
  # @return [Object, nil] The response of the operation.
  #
  # source://gapic-common//lib/gapic/operation.rb#162
  def response; end

  # Checks if the operation is done and the result is a response. If the operation is not finished then this will
  # return false.
  #
  # @return [Boolean] Whether a response has been returned.
  #
  # source://gapic-common//lib/gapic/operation.rb#154
  def response?; end

  # If the operation is done, returns the response. If the operation response is an error, the error will be
  # returned. Otherwise returns nil.
  #
  # @return [Object, Google::Rpc::Status, nil] The result of the operation. If it is an error a
  #   `Google::Rpc::Status` will be returned.
  #
  # source://gapic-common//lib/gapic/operation.rb#103
  def results; end

  # Blocking method to wait until the operation has completed or the maximum timeout has been reached. Upon
  # completion, registered callbacks will be called, then - if a block is given - the block will be called.
  #
  # @param retry_policy [RetryPolicy, Hash, Proc] The policy for retry. A custom proc that takes the error as an
  #   argument and blocks can also be provided.
  # @yieldparam operation [Gapic::Operation] Yields the finished Operation.
  #
  # source://gapic-common//lib/gapic/operation.rb#255
  def wait_until_done!(retry_policy: T.unsafe(nil)); end
end

# The policy for retrying operation reloads using an incremental backoff. A new object instance should be used for
# every Operation invocation.
#
# source://gapic-common//lib/gapic/operation/retry_policy.rb#21
class Gapic::Operation::RetryPolicy
  # Create new Operation RetryPolicy.
  #
  # @param initial_delay [Numeric] client-side timeout
  # @param multiplier [Numeric] client-side timeout
  # @param max_delay [Numeric] client-side timeout
  # @param timeout [Numeric] client-side timeout
  # @return [RetryPolicy] a new instance of RetryPolicy
  #
  # source://gapic-common//lib/gapic/operation/retry_policy.rb#30
  def initialize(initial_delay: T.unsafe(nil), multiplier: T.unsafe(nil), max_delay: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#54
  def call; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#38
  def initial_delay; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#46
  def max_delay; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#42
  def multiplier; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#50
  def timeout; end

  private

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#65
  def deadline; end

  # The current delay value.
  #
  # source://gapic-common//lib/gapic/operation/retry_policy.rb#76
  def delay; end

  # source://gapic-common//lib/gapic/operation/retry_policy.rb#80
  def delay!; end

  # Calculate and set the next delay value.
  #
  # source://gapic-common//lib/gapic/operation/retry_policy.rb#87
  def increment_delay!; end

  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/operation/retry_policy.rb#70
  def retry?; end
end

# A class to provide the Enumerable interface to the response of a paginated method. PagedEnumerable assumes
# response message holds a list of resources and the token to the next page.
#
# PagedEnumerable provides the enumerations over the resource data, and also provides the enumerations over the
# pages themselves.
#
# @example normal iteration over resources.
#   paged_enumerable.each { |resource| puts resource }
# @example per-page iteration.
#   paged_enumerable.each_page { |page| puts page }
# @example Enumerable over pages.
#   paged_enumerable.each_page do |page|
#   page.each { |resource| puts resource }
#   end
# @example more exact operations over pages.
#   while some_condition()
#   page = paged_enumerable.page
#   do_something(page)
#   break if paged_enumerable.next_page?
#   paged_enumerable.next_page
#   end
#
# source://gapic-common//lib/gapic/paged_enumerable.rb#42
class Gapic::PagedEnumerable
  include ::Enumerable

  # @param grpc_stub [Gapic::GRPC::Stub] The Gapic gRPC stub object.
  # @param method_name [Symbol] The RPC method name.
  # @param request [Object] The request object.
  # @param response [Object] The response object.
  # @param operation [::GRPC::ActiveCall::Operation] The RPC operation for the response.
  # @param options [Gapic::CallOptions] The options for making the RPC call.
  # @param format_resource [Proc] A Proc object to format the resource object. The Proc should accept response as an
  #   argument, and return a formatted resource object. Optional.
  # @private
  # @return [PagedEnumerable] a new instance of PagedEnumerable
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#61
  def initialize(grpc_stub, method_name, request, response, operation, options, format_resource: T.unsafe(nil)); end

  # Iterate over the resources.
  #
  # @raise [RuntimeError] if it's not started yet.
  # @yield [Object] Gives the resource objects in the stream.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#83
  def each(&block); end

  # Iterate over the pages.
  #
  # @raise if it's not started yet.
  # @yield [Page] Gives the pages in the stream.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#98
  def each_page; end

  # Update the response in the current page.
  #
  # @return [Page] the new page object.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#120
  def next_page; end

  # Update the response in the current page.
  #
  # @return [Page] the new page object.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#120
  def next_page!; end

  # True if it has the next page.
  #
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#111
  def next_page?; end

  # The page token to be used for the next RPC call.
  #
  # @return [String]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#140
  def next_page_token; end

  # Returns the value of attribute page.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#48
  def page; end

  # The current response object, for the current page.
  #
  # @return [Object]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#149
  def response; end

  private

  # @raise [ArgumentError]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#155
  def verify_request!; end

  # @raise [ArgumentError]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#168
  def verify_response!; end
end

# A class to represent a page in a PagedEnumerable. This also implements Enumerable, so it can iterate over the
# resource elements.
#
# source://gapic-common//lib/gapic/paged_enumerable.rb#199
class Gapic::PagedEnumerable::Page
  include ::Enumerable

  # @param response [Object] The response object for the page.
  # @param resource_field [String] The name of the field in response which holds the resources.
  # @param operation [::GRPC::ActiveCall::Operation] the RPC operation for the page.
  # @param format_resource [Proc] A Proc object to format the resource object. The Proc should accept response as an
  #   argument, and return a formatted resource object. Optional.
  # @private
  # @return [Page] a new instance of Page
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#212
  def initialize(response, resource_field, operation, format_resource: T.unsafe(nil)); end

  # Iterate over the resources.
  #
  # @yield [Object] Gives the resource objects in the page.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#224
  def each; end

  # The page token to be used for the next RPC call.
  #
  # @return [String]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#241
  def next_page_token; end

  # Truthiness of next_page_token.
  #
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#252
  def next_page_token?; end

  # @return [::GRPC::ActiveCall::Operation] the RPC operation for the page.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#202
  def operation; end

  # @return [Object] the response object for the page.
  #
  # source://gapic-common//lib/gapic/paged_enumerable.rb#201
  def response; end
end

# A set of internal utilities for coercing data to protobuf messages.
#
# source://gapic-common//lib/gapic/protobuf.rb#21
module Gapic::Protobuf
  class << self
    # Creates an instance of a protobuf message from a hash that may include nested hashes. `google/protobuf` allows
    # for the instantiation of protobuf messages using hashes but does not allow for nested hashes to instantiate
    # nested submessages.
    #
    # @param hash [Hash, Object] The hash to be converted into a proto message. If an instance of the proto message
    #   class is given, it is returned unchanged.
    # @param to [Class] The corresponding protobuf message class of the given hash.
    # @raise [ArgumentError]
    # @return [Object] An instance of the given message class.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#32
    def coerce(hash, to:); end

    # Utility for converting a Ruby Time instance to a Google::Protobuf::Timestamp.
    #
    # @param time [Time] The Time to be converted.
    # @return [Google::Protobuf::Timestamp] The converted Google::Protobuf::Timestamp.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#120
    def time_to_timestamp(time); end

    # Utility for converting a Google::Protobuf::Timestamp instance to a Ruby time.
    #
    # @param timestamp [Google::Protobuf::Timestamp] The timestamp to be converted.
    # @return [Time] The converted Time.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#110
    def timestamp_to_time(timestamp); end

    private

    # Coerces a message-typed field.
    # The field can be a normal single message, a repeated message, or a map.
    #
    # @param val [Object] The value to coerce
    # @param field_descriptor [Google::Protobuf::FieldDescriptor] The field descriptor.
    # @private
    #
    # source://gapic-common//lib/gapic/protobuf.rb#84
    def coerce_submessage(val, field_descriptor); end

    # Coerces values of the given hash to be acceptable by the instantiation method provided by `google/protobuf`
    #
    # @param hash [Hash] The hash whose nested hashes will be coerced.
    # @param message_descriptor [Google::Protobuf::Descriptor] The protobuf descriptor for the message.
    # @private
    # @return [Hash] A hash whose nested hashes have been coerced.
    #
    # source://gapic-common//lib/gapic/protobuf.rb#55
    def coerce_submessages(hash, message_descriptor); end
  end
end

# source://gapic-common//lib/gapic/rest/faraday_middleware.rb#17
module Gapic::Rest; end

# This alias is left here for the backwards compatibility purposes.
# Rest LROs now use the same GenericLRO base as the GRPC LROs.
#
# @deprecated Use {Gapic::GenericLRO::BaseOperation} instead.
#
# source://gapic-common//lib/gapic/rest/operation.rb#23
Gapic::Rest::BaseOperation = Gapic::GenericLRO::BaseOperation

# A class for making REST calls through Faraday
# ClientStub's responsibilities:
#   - wrap Faraday methods with a bounded explicit interface
#   - store service endpoint and create full url for the request
#   - store credentials and add auth information to the request
#
# source://gapic-common//lib/gapic/rest/client_stub.rb#29
class Gapic::Rest::ClientStub
  include ::Gapic::UniverseDomainConcerns

  # Initializes with an endpoint and credentials
  #
  # @param endpoint [String] The endpoint of the API. Overrides any endpoint_template.
  # @param endpoint_template [String] The endpoint of the API, where the
  #   universe domain component of the hostname is marked by the string in
  #   the constant {UniverseDomainConcerns::ENDPOINT_SUBSTITUTION}.
  # @param universe_domain [String] The universe domain in which calls
  #   should be made. Defaults to `googleapis.com`.
  # @param credentials [Google::Auth::Credentials] Credentials to send with calls in form of a googleauth credentials object.
  #   (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
  # @param numeric_enums [Boolean] Whether to signal the server to JSON-encode enums as ints
  # @param raise_faraday_errors [Boolean] Whether to raise Faraday errors instead of wrapping them in `Gapic::Rest::Error`
  #   Added for backwards compatibility.
  #   Default is `true`. All REST clients (except for old versions of `google-cloud-compute-v1`)
  #   should explicitly set this parameter to `false`.
  # @return [ClientStub] a new instance of ClientStub
  # @yield [Faraday::Connection]
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#53
  def initialize(credentials:, endpoint: T.unsafe(nil), endpoint_template: T.unsafe(nil), universe_domain: T.unsafe(nil), numeric_enums: T.unsafe(nil), raise_faraday_errors: T.unsafe(nil)); end

  # Sends a http request via Faraday
  #
  # @param verb [Symbol] http verb
  # @param uri [String] uri to send this request to
  # @param body [String, nil] a body to send with the request, nil for requests without a body
  # @param params [Hash] query string parameters for the request
  # @param metadata [Hash] additional headers for the request
  # @param is_server_streaming [Boolean] flag if method is streaming
  # @private
  # @return [Faraday::Response]
  # @yieldparam chunk [String] The chunk of data received during server streaming.
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#198
  def base_make_http_request(verb:, uri:, body:, params:, metadata:, timeout:, is_server_streaming: T.unsafe(nil)); end

  # Makes a DELETE request
  #
  # @param uri [String] uri to send this request to
  # @param params [Hash] query string parameters for the request
  # @param options [::Gapic::CallOptions, Hash] gapic options to be applied
  #   to the REST call. Currently only timeout and headers are supported.
  # @return [Faraday::Response]
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#103
  def make_delete_request(uri:, params: T.unsafe(nil), options: T.unsafe(nil)); end

  # Makes a GET request
  #
  # @param uri [String] uri to send this request to
  # @param params [Hash] query string parameters for the request
  # @param options [::Gapic::CallOptions, Hash] gapic options to be applied
  #   to the REST call. Currently only timeout and headers are supported.
  # @return [Faraday::Response]
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#91
  def make_get_request(uri:, params: T.unsafe(nil), options: T.unsafe(nil)); end

  # Sends a http request via Faraday
  #
  # @param verb [Symbol] http verb
  # @param uri [String] uri to send this request to
  # @param body [String, nil] a body to send with the request, nil for requests without a body
  # @param params [Hash] query string parameters for the request
  # @param options [::Gapic::CallOptions, Hash] gapic options to be applied to the REST call.
  # @param is_server_streaming [Boolean] flag if method is streaming
  # @private
  # @return [Faraday::Response]
  # @yieldparam chunk [String] The chunk of data received during server streaming.
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#157
  def make_http_request(verb, uri:, body:, params:, options:, is_server_streaming: T.unsafe(nil), &block); end

  # Makes a PATCH request
  #
  # @param uri [String] uri to send this request to
  # @param body [String] a body to send with the request, nil for requests without a body
  # @param params [Hash] query string parameters for the request
  # @param options [::Gapic::CallOptions, Hash] gapic options to be applied
  #   to the REST call. Currently only timeout and headers are supported.
  # @return [Faraday::Response]
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#116
  def make_patch_request(uri:, body:, params: T.unsafe(nil), options: T.unsafe(nil)); end

  # Makes a POST request
  #
  # @param uri [String] uri to send this request to
  # @param body [String] a body to send with the request, nil for requests without a body
  # @param params [Hash] query string parameters for the request
  # @param options [::Gapic::CallOptions, Hash] gapic options to be applied
  #   to the REST call. Currently only timeout and headers are supported.
  # @return [Faraday::Response]
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#129
  def make_post_request(uri:, body: T.unsafe(nil), params: T.unsafe(nil), options: T.unsafe(nil)); end

  # Makes a PUT request
  #
  # @param uri [String] uri to send this request to
  # @param body [String] a body to send with the request, nil for requests without a body
  # @param params [Hash] query string parameters for the request
  # @param options [::Gapic::CallOptions, Hash] gapic options to be applied
  #   to the REST call. Currently only timeout and headers are supported.
  # @return [Faraday::Response]
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#142
  def make_put_request(uri:, body: T.unsafe(nil), params: T.unsafe(nil), options: T.unsafe(nil)); end

  private

  # Calculates deadline
  #
  # @param options [Gapic::CallOptions] call options for this call
  # @return [Numeric, nil] Deadline against a POSIX clock_gettime()
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#225
  def calculate_deadline(options); end

  # Whether the timeout should be retried
  #
  # @param timeout [Numeric, nil]
  # @return [Boolean] whether the timeout should be retried
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#249
  def check_retry?(timeout); end

  # Calculates timeout (seconds) to use as a Faraday timeout
  #
  # @param deadline [Numeric, nil] deadline
  # @return [Numeric, nil] Timeout (seconds)
  #
  # source://gapic-common//lib/gapic/rest/client_stub.rb#238
  def get_timeout(deadline); end
end

# An error class that represents DeadlineExceeded error for Rest
# with an optional retry root cause.
#
# If the deadline for making a call was exceeded during the rest calls,
# this exception is thrown wrapping Faraday::TimeoutError.
#
# If there were other exceptions retried before that, the last one will be
# saved as a "root_cause".
#
# source://gapic-common//lib/gapic/rest/error.rb#167
class Gapic::Rest::DeadlineExceededError < ::Gapic::Rest::Error
  # @param message [String, nil] error message
  # @param status_code [Integer, nil] HTTP status code of this error
  # @param status [String, nil] The text representation of status as parsed from the response body
  # @param details [Object, nil] Details data of this error
  # @param headers [Object, nil] Http headers data of this error
  # @param root_cause [Object, nil] The exception that was being retried
  #   when the Faraday::TimeoutError occured.
  # @private
  # @return [DeadlineExceededError] a new instance of DeadlineExceededError
  #
  # source://gapic-common//lib/gapic/rest/error.rb#180
  def initialize(message, status_code, status: T.unsafe(nil), details: T.unsafe(nil), headers: T.unsafe(nil), root_cause: T.unsafe(nil)); end

  # @return [Object, nil] The exception that was being retried
  #   when the Faraday::TimeoutError error occured.
  #
  # source://gapic-common//lib/gapic/rest/error.rb#168
  def root_cause; end

  class << self
    # This creates a new error message wrapping the Faraday's one. Additionally
    # it tries to parse and set a detailed message and an error code from
    # from the Google Cloud's response body
    #
    # @param err [Faraday::TimeoutError] the Faraday error to wrap
    # @param root_cause [Object, nil] The exception that was being retried
    #   when the Faraday::TimeoutError occured.
    # @private
    # @return [Gapic::Rest::DeadlineExceededError]
    #
    # source://gapic-common//lib/gapic/rest/error.rb#198
    def wrap_faraday_error(err, root_cause: T.unsafe(nil)); end
  end
end

# Gapic REST exception class
#
# source://gapic-common//lib/gapic/rest/error.rb#24
class Gapic::Rest::Error < ::Gapic::Common::Error
  # @param message [String, nil] error message
  # @param status_code [Integer, nil] HTTP status code of this error
  # @param status [String, nil] The text representation of status as parsed from the response body
  # @param details [Object, nil] Details data of this error
  # @param headers [Object, nil] Http headers data of this error
  # @return [Error] a new instance of Error
  #
  # source://gapic-common//lib/gapic/rest/error.rb#45
  def initialize(message, status_code, status: T.unsafe(nil), details: T.unsafe(nil), headers: T.unsafe(nil)); end

  # @return [Object, nil] the details as parsed from the response body
  #
  # source://gapic-common//lib/gapic/rest/error.rb#30
  def details; end

  # The Cloud error wrapper expect to see a `header` property
  #
  # @return [Object, nil] the headers of the REST error
  #
  # source://gapic-common//lib/gapic/rest/error.rb#34
  def header; end

  # @return [Object, nil] the headers of the REST error
  #
  # source://gapic-common//lib/gapic/rest/error.rb#34
  def headers; end

  # @return [Object, nil] the text representation of status as parsed from the response body
  #
  # source://gapic-common//lib/gapic/rest/error.rb#28
  def status; end

  # @return [Integer, nil] the http status code for the error
  #
  # source://gapic-common//lib/gapic/rest/error.rb#26
  def status_code; end

  # The Cloud error wrapper expect to see a `status_details` property
  #
  # @return [Object, nil] the details as parsed from the response body
  #
  # source://gapic-common//lib/gapic/rest/error.rb#30
  def status_details; end

  class << self
    # Tries to get the error information from Faraday error
    #
    # @param err [Faraday::Error] the Faraday error to extract information from
    # @private
    # @return [Array(String, String, String, String, String)]
    #
    # source://gapic-common//lib/gapic/rest/error.rb#73
    def parse_faraday_error(err); end

    # This creates a new error message wrapping the Faraday's one. Additionally
    # it tries to parse and set a detailed message and an error code from
    # from the Google Cloud's response body
    #
    # @param err [Faraday::Error] the Faraday error to wrap
    # @return [Gapic::Rest::Error]
    #
    # source://gapic-common//lib/gapic/rest/error.rb#62
    def wrap_faraday_error(err); end

    private

    # Parses the details data, trying to extract the Protobuf.Any objects
    # from it, if it's an array of hashes. Otherwise returns it as is.
    #
    # @param details [Object, nil] the details object
    # @private
    # @return [Object, nil]
    #
    # source://gapic-common//lib/gapic/rest/error.rb#124
    def parse_details(details); end

    # Tries to get the error information from the JSON bodies
    #
    # @param body_str [String]
    # @private
    # @return [Array(String, String, String, String)]
    #
    # source://gapic-common//lib/gapic/rest/error.rb#97
    def try_parse_from_body(body_str); end
  end
end

# Registers the middleware with Faraday
#
# source://gapic-common//lib/gapic/rest/faraday_middleware.rb#19
module Gapic::Rest::FaradayMiddleware; end

# Request middleware that constructs the Authorization HTTP header
# using ::Google::Auth::Credentials
#
# @private
#
# source://gapic-common//lib/gapic/rest/faraday_middleware.rb#25
class Gapic::Rest::FaradayMiddleware::GoogleAuthorization < ::Faraday::Middleware
  # @param app [#call]
  # @param credentials [Google::Auth::Credentials, Signet::OAuth2::Client, Symbol, Proc] Provides the means for authenticating requests made by
  #   the client. This parameter can be many types:
  #   * A `Google::Auth::Credentials` uses a the properties of its represented keyfile for authenticating requests
  #   made by this client.
  #   * A `Signet::OAuth2::Client` object used to apply the OAuth credentials.
  #   * A `Proc` will be used as an updater_proc for the auth token.
  #   * A `Symbol` is treated as a signal that authentication is not required.
  # @private
  # @return [GoogleAuthorization] a new instance of GoogleAuthorization
  #
  # source://gapic-common//lib/gapic/rest/faraday_middleware.rb#38
  def initialize(app, credentials); end

  # @param env [Faraday::Env]
  # @private
  #
  # source://gapic-common//lib/gapic/rest/faraday_middleware.rb#53
  def call(env); end
end

# Transcodes a proto request message into HTTP Rest call components
# using a configuration of bindings.
# Internal doc go/actools-regapic-grpc-transcoding.
#
# @private
#
# source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#17
class Gapic::Rest::GrpcTranscoder
  # @return [GrpcTranscoder] a new instance of GrpcTranscoder
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#24
  def initialize(bindings = T.unsafe(nil)); end

  # Performs the full grpc transcoding -- creating a REST request from the GRPC request
  # by matching the http bindings and choosing the last one to match.
  # From the matching binding and the request the following components of the REST request
  # are produced:
  # - A [Symbol] representing the Rest verb (e.g. `:get`)
  # - Uri [String] (e.g. `books/100:read`)
  # - Query string params in the form of key-value pairs [Array<Array{String, String}>]
  #   (e.g. [["foo", "bar"], ["baz", "qux"]])
  # - Body of the request [String]
  #
  # @param request [Object] The GRPC request object
  # @private
  # @raise [::Gapic::Common::Error]
  # @return [Array] The components of the transcoded request.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#69
  def transcode(request); end

  # Creates a new trascoder that is a copy of this one, but with an additional
  # binding defined by the parameters.
  #
  # @param uri_method [Symbol] The rest verb for the binding.
  # @param uri_template [String] The string with uri template for the binding.
  #   This string will be expanded with the parameters from variable bindings.
  # @param matches [Array<Array>] Variable bindings in an array. Every element
  #   of the array is an [Array] triplet, where:
  #   - the first element is a [String] field path (e.g. `foo.bar`) in the request
  #   to bind to
  #   - the second element is a [Regexp] to match the field value
  #   - the third element is a [Boolean] whether the slashes in the field value
  #   should be preserved (as opposed to escaped) when expanding the uri template.
  # @param body [String, Nil] The body template, e.g. `*` or a field path.
  # @private
  # @return [Gapic::Rest::GrpcTranscoder] The updated transcoder.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#46
  def with_bindings(uri_method:, uri_template:, matches: T.unsafe(nil), body: T.unsafe(nil)); end

  private

  # Binds request values for the uri template expansion.
  # This method modifies the provided `request_hash` parameter.
  # Returned values are percent-escaped with slashes potentially preserved.
  #
  # @param http_binding [Gapic::Rest::GrpcTranscoder::HttpBinding] Http binding to get the field bindings from.
  # @param request_hash [Hash] A hash of the GRPC request with the unset proto3_optional fields pre-removed.
  #   !!! This hash will be modified. The bound fields will be deleted. !!!
  # @return [Hash{String, String}] Name to value hash of the variables for the uri template expansion.
  #   The values are percent-escaped with slashes potentially preserved.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#114
  def bind_uri_values!(http_binding, request_hash); end

  # Builds query params for the REST request.
  # This function calls itself recursively for every submessage field, passing
  # the submessage hash as request and the path to the submessage field as a prefix.
  #
  # @param request_hash [Hash] A hash of the GRPC request or the sub-request with the unset
  #   proto3_optional fields and the values that are bound to URI removed.
  # @param prefix [String] A prefix to form the correct query parameter key.
  # @return [Array{String, String}] Query string params as key-value pairs.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#182
  def build_query_params(request_hash, prefix = T.unsafe(nil)); end

  # Converts a snake_case parameter name into camelCase for query string parameters.
  #
  # @param attr_name [String] Parameter name.
  # @return [String] Camel-cased parameter name.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#263
  def camel_name_for(attr_name); end

  # Constructs body and query parameters for the Rest request.
  #
  # @param body_template [String, Nil] The template for the body, e.g. `*`.
  # @param request_hash_without_uri [Hash] The hash of the GRPC request with the unset proto3_optional fields
  #   and the values that are bound to URI removed.
  # @param request [Object] The GRPC request.
  # @return [Array{String, Array}] A pair of body and query parameters.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#142
  def construct_body_query_params(body_template, request_hash_without_uri, request); end

  # Performs variable expansion on the template using the bindings provided
  #
  # @param template [String] The Uri template.
  # @param bindings [Hash{String, String}] The variable bindings. The values should be percent-escaped
  #   (with slashes potentially preserved).
  # @return [String] The expanded template.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#251
  def expand_template(template, bindings); end

  # Extracts a non-submessage non-array value from the request hash by path
  # if its string representation matches the regex provided.
  # This method modifies the provided `request_hash` parameter.
  # Returns nil if:
  # - the field is not found
  # - the field is a Message or an array,
  # - the regex does not match
  #
  # @param request_hash [Hash] A hash of the GRPC request or the sub-request with the unset
  #   proto3_optional fields removed.
  #   !!! This hash will be modified. The extracted field will be deleted. !!!
  # @param field_path [String] A path to the field, e.g. `foo.bar`.
  # @param regex [Regexp] A regex to match on the field's string representation.
  # @return [String, Nil] the field's string representation or nil.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#215
  def extract_scalar_value!(request_hash, field_path, regex); end

  # Finds a value in the hash by path.
  #
  # @param request_hash [Hash] A hash of the GRPC request or the sub-request.
  # @param field_path [String] A path of the field, e.g. `foo.bar`.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#227
  def find_value(request_hash, field_path); end

  # Percent-escapes a string.
  #
  # @param str [String] String to escape.
  # @return [String] Escaped string.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder.rb#130
  def percent_escape(str); end
end

# A single binding for GRPC-REST transcoding of a request
# It includes a uri template with bound field parameters, a HTTP method type,
# and a body template
#
# @private
#
# source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#33
class Gapic::Rest::GrpcTranscoder::HttpBinding
  # @return [HttpBinding] a new instance of HttpBinding
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#39
  def initialize(method, template, field_bindings, body); end

  # @return [String] The body template for the request.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#37
  def body; end

  # @return [Array<Gapic::Rest::GrpcTranscoder::HttpBinding::FieldBinding>] The field bindings for the URI template variables.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#36
  def field_bindings; end

  # @return [Symbol] The REST verb for the request.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#34
  def method; end

  # @return [String] The URI template for the request.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#35
  def template; end

  class << self
    # Creates a new HttpBinding.
    #
    # @param uri_method [Symbol] The rest verb for the binding.
    # @param uri_template [String] The string with uri template for the binding.
    #   This string will be expanded with the parameters from variable bindings.
    # @param matches [Array<Array>] Variable bindings in an array. Every element
    #   of the array is an [Array] triplet, where:
    #   - the first element is a [String] field path (e.g. `foo.bar`) in the request
    #   to bind to
    #   - the second element is a [Regexp] to match the field value
    #   - the third element is a [Boolean] whether the slashes in the field value
    #   should be preserved (as opposed to escaped) when expanding the uri template.
    # @param body [String, Nil] The body template, e.g. `*` or a field path.
    # @private
    # @return [Gapic::Rest::GrpcTranscoder::HttpBinding] The new binding.
    #
    # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#63
    def create_with_validation(uri_method:, uri_template:, matches: T.unsafe(nil), body: T.unsafe(nil)); end
  end
end

# A single binding for a field of a request message.
#
# source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#105
class Gapic::Rest::GrpcTranscoder::HttpBinding::FieldBinding
  # @return [FieldBinding] a new instance of FieldBinding
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#110
  def initialize(field_path, regex, preserve_slashes); end

  # @return [String] The path of the bound field, e.g. `foo.bar`.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#106
  def field_path; end

  # @return [Boolean] Whether the slashes in the field value should be preserved
  #   (as opposed to percent-escaped)
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#108
  def preserve_slashes; end

  # @return [Regexp] The regex to match on the bound field's string representation.
  #
  # source://gapic-common//lib/gapic/rest/grpc_transcoder/http_binding.rb#107
  def regex; end
end

# A class to provide the Enumerable interface to the response of a REST paginated method.
# PagedEnumerable assumes response message holds a list of resources and the token to the next page.
#
# PagedEnumerable provides the enumerations over the resource data, and also provides the enumerations over the
# pages themselves.
#
# @example normal iteration over resources.
#   paged_enumerable.each { |resource| puts resource }
# @example per-page iteration.
#   paged_enumerable.each_page { |page| puts page }
# @example Enumerable over pages.
#   paged_enumerable.each_page do |page|
#   page.each { |resource| puts resource }
#   end
# @example more exact operations over pages.
#   while some_condition()
#   page = paged_enumerable.page
#   do_something(page)
#   break if paged_enumerable.next_page?
#   paged_enumerable.next_page
#   end
#
# source://gapic-common//lib/gapic/rest/paged_enumerable.rb#46
class Gapic::Rest::PagedEnumerable
  include ::Enumerable

  # @param service_stub [Object] The REST service_stub with the baseline implementation for the wrapped method.
  # @param method_name [Symbol] The REST method name that is being wrapped.
  # @param request [Object] The request object.
  # @param response [Object] The response object.
  # @param options [Gapic::CallOptions] The options for making the RPC call.
  # @param format_resource [Proc] A Proc object to format the resource object. The Proc should accept response as an
  #   argument, and return a formatted resource object. Optional.
  # @private
  # @return [PagedEnumerable] a new instance of PagedEnumerable
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#61
  def initialize(service_stub, method_name, resource_field_name, request, response, options, format_resource: T.unsafe(nil)); end

  # Iterate over the individual resources, automatically requesting new pages as needed.
  #
  # @return [Enumerator] if no block is provided
  # @yield [Object] Gives the resource objects in the stream.
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#80
  def each(&block); end

  # Iterate over the pages.
  #
  # @return [Enumerator] if no block is provided
  # @yield [Page] Gives the pages in the stream.
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#95
  def each_page; end

  # Load the next page and set it as the current page.
  # If there is no next page, sets nil as a current page.
  #
  # @return [Page, nil] the new page object.
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#120
  def next_page; end

  # Load the next page and set it as the current page.
  # If there is no next page, sets nil as a current page.
  #
  # @return [Page, nil] the new page object.
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#120
  def next_page!; end

  # True if there is at least one more page of results.
  #
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#110
  def next_page?; end

  # The page token to be used for the next RPC call, or the empty string if there is no next page.
  # nil if the iteration is complete.
  #
  # @return [String, nil]
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#140
  def next_page_token; end

  # @return [Page] The current page object.
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#49
  def page; end

  # The current response object, for the current page.
  # nil if the iteration is complete.
  #
  # @return [Object, nil]
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#150
  def response; end
end

# A class to represent a page in a PagedEnumerable. This also implements Enumerable, so it can iterate over the
# resource elements.
#
# source://gapic-common//lib/gapic/rest/paged_enumerable.rb#160
class Gapic::Rest::PagedEnumerable::Page
  include ::Enumerable

  # The Proc should accept response as an argument, and return a formatted resource object. Optional.
  #
  # @param response [Object] The response object for the page.
  # @param resource_field [String] The name of the field in response which holds the resources.
  # @param format_resource [Proc, nil] A Proc object to format the resource object. Default nil (no formatting).
  # @private
  # @return [Page] a new instance of Page
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#171
  def initialize(response, resource_field, format_resource: T.unsafe(nil)); end

  # Iterate over the resources.
  #
  # @return [Enumerator] if no block is provided
  # @yield [Object] Gives the resource objects in the page.
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#184
  def each; end

  # The page token to be used for the next RPC call, or the empty string if there is no next page.
  #
  # @return [String]
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#199
  def next_page_token; end

  # Whether the next_page_token exists and is not empty
  #
  # @return [Boolean]
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#208
  def next_page_token?; end

  # Resources in this page presented as an array.
  # When the iterable is a protobuf map, the `.each |item|` gives just the keys
  # to iterate like a normal hash it should be converted to an array first
  #
  # @return [Array]
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#219
  def resources; end

  # @return [Object] the response object for the page.
  #
  # source://gapic-common//lib/gapic/rest/paged_enumerable.rb#162
  def response; end
end

# A class to provide the Enumerable interface to the response of a REST server-streaming dmethod.
#
# ServerStream provides the enumerations over the individual response messages within the stream.
#
# @example normal iteration over resources.
#   server_stream.each { |response| puts response }
#
# source://gapic-common//lib/gapic/rest/server_stream.rb#27
class Gapic::Rest::ServerStream
  include ::Enumerable

  # Initializes ServerStream object.
  #
  # @param message_klass [Class]
  # @param json_enumerator [Enumerator<String>]
  # @return [ServerStream] a new instance of ServerStream
  #
  # source://gapic-common//lib/gapic/rest/server_stream.rb#35
  def initialize(message_klass, json_enumerator); end

  # Iterate over JSON objects in the streamed response.
  #
  # @return [Enumerator] if no block is provided
  # @yield [Object] Gives one complete Message object.
  #
  # source://gapic-common//lib/gapic/rest/server_stream.rb#49
  def each; end

  private

  # Builds the next JSON object of the server stream from chunk.
  #
  # @param chunk [String] Contains (partial) JSON object
  #
  # source://gapic-common//lib/gapic/rest/server_stream.rb#80
  def next_json!(chunk); end
end

# A class to provide the Enumerable interface to an incoming stream of data.
#
# ThreadedEnumerator provides the enumerations over the individual chunks of data received from the server.
#
# @example normal iteration over resources.
#   chunk = threaded_enumerator.next
# @private
#
# source://gapic-common//lib/gapic/rest/threaded_enumerator.rb#31
class Gapic::Rest::ThreadedEnumerator
  # Spawns a new thread and does appropriate clean-up
  # in case thread fails. Propagates exception back
  # to main thread.
  #
  # @return [ThreadedEnumerator] a new instance of ThreadedEnumerator
  # @yieldparam in_q [Queue] input queue
  # @yieldparam out_q [Queue] output queue
  #
  # source://gapic-common//lib/gapic/rest/threaded_enumerator.rb#41
  def initialize; end

  # @return [Queue] Input queue.
  #
  # source://gapic-common//lib/gapic/rest/threaded_enumerator.rb#32
  def in_q; end

  # source://gapic-common//lib/gapic/rest/threaded_enumerator.rb#53
  def next; end

  # @return [Queue] Output queue.
  #
  # source://gapic-common//lib/gapic/rest/threaded_enumerator.rb#33
  def out_q; end
end

# Surfaces information about the active call
# from the underlying transport library.
#
# source://gapic-common//lib/gapic/rest/transport_operation.rb#21
class Gapic::Rest::TransportOperation
  # @param underlying_op [::Object, nil, ::Faraday::Response] The underlying transport's library object that describes the active call, if any.
  # @private
  # @return [TransportOperation] a new instance of TransportOperation
  #
  # source://gapic-common//lib/gapic/rest/transport_operation.rb#33
  def initialize(underlying_op); end

  # The underlying transport's library object that describes the active call, if any.
  # It is not guaranteed to be any specific type, and its value is not guarateed to be stable.
  #
  # @private
  # @return [::Object, nil, ::Faraday::Response]
  #
  # source://gapic-common//lib/gapic/rest/transport_operation.rb#27
  def underlying_op; end
end

# Manages requests for an input stream and holds the stream open until {#close} is called.
#
# source://gapic-common//lib/gapic/stream_input.rb#19
class Gapic::StreamInput
  # Create a new input stream object to manage streaming requests and hold the stream open until {#close} is called.
  #
  # @param requests [Object]
  # @return [StreamInput] a new instance of StreamInput
  #
  # source://gapic-common//lib/gapic/stream_input.rb#25
  def initialize(*requests); end

  # Adds a request object to the stream.
  #
  # @param request [Object]
  # @return [StreamInput] Returns self.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#39
  def <<(request); end

  # Adds a request object to the stream.
  #
  # @param request [Object]
  # @return [StreamInput] Returns self.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#39
  def append(request); end

  # Closes the stream.
  #
  # @return [StreamInput] Returns self.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#52
  def close; end

  # Adds a request object to the stream.
  #
  # @param request [Object]
  # @return [StreamInput] Returns self.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#39
  def push(request); end

  # Iterates the requests given to the stream.
  #
  # @private
  # @return [Enumerator] An Enumerator is returned if no block is given.
  # @yield [request] The block for accessing each request.
  # @yieldparam request [Object] The request object.
  #
  # source://gapic-common//lib/gapic/stream_input.rb#67
  def to_enum; end
end

# A mixin module that provides methods for obtaining the effective universe
# domain, endpoint, and credentials for a stub. This is included in
# Grpc::ServiceStub and Rest::ClientStub.
#
# source://gapic-common//lib/gapic/universe_domain_concerns.rb#23
module Gapic::UniverseDomainConcerns
  # The effective credentials
  #
  # @return [Google::Auth::Credentials, Signet::OAuth2::Client, Proc, ::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials]
  #
  # source://gapic-common//lib/gapic/universe_domain_concerns.rb#48
  def credentials; end

  # The effective endpoint
  #
  # @return [String]
  #
  # source://gapic-common//lib/gapic/universe_domain_concerns.rb#34
  def endpoint; end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://gapic-common//lib/gapic/universe_domain_concerns.rb#40
  def universe_domain; end

  protected

  # Called from the stub constructor to populate the data.
  #
  # @private
  # @raise [ArgumentError]
  #
  # source://gapic-common//lib/gapic/universe_domain_concerns.rb#56
  def setup_universe_domain(universe_domain: T.unsafe(nil), endpoint: T.unsafe(nil), endpoint_template: T.unsafe(nil), credentials: T.unsafe(nil)); end
end

# A substitution string for the universe domain in an endpoint template
#
# @return [String]
#
# source://gapic-common//lib/gapic/universe_domain_concerns.rb#28
Gapic::UniverseDomainConcerns::ENDPOINT_SUBSTITUTION = T.let(T.unsafe(nil), String)

# Raised when the configured universe domain does not match the universe
# domain of the credentials.
#
# source://gapic-common//lib/gapic/universe_domain_concerns.rb#82
class Gapic::UniverseDomainMismatch < ::Gapic::Common::Error; end
