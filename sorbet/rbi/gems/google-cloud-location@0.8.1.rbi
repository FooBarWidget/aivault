# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-location` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-location`.


# source://google-cloud-location//lib/google/cloud/location/version.rb#20
module Google; end

# source://google-cloud-location//lib/google/cloud/location/version.rb#21
module Google::Cloud
  class << self
    # source://google-cloud-env/2.2.0/lib/google/cloud/env.rb#530
    def env; end
  end
end

# API client module.
#
# @example Load this package, including all its services, and instantiate a gRPC client
#
#   require "google/cloud/location"
#   client = ::Google::Cloud::Location::Locations::Client.new
# @example Load this package, including all its services, and instantiate a REST client
#
#   require "google/cloud/location"
#   client = ::Google::Cloud::Location::Locations::Rest::Client.new
#
# source://google-cloud-location//lib/google/cloud/location/version.rb#22
module Google::Cloud::Location; end

class Google::Cloud::Location::GetLocationRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Location::ListLocationsRequest < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Location::ListLocationsResponse < ::Google::Protobuf::AbstractMessage; end
class Google::Cloud::Location::Location < ::Google::Protobuf::AbstractMessage; end

# An abstract interface that provides location-related information for
# a service. Service-specific metadata is provided through the
# {::Google::Cloud::Location::Location#metadata Location.metadata} field.
#
# @example Load this service and instantiate a gRPC client
#
#   require "google/cloud/location/locations"
#   client = ::Google::Cloud::Location::Locations::Client.new
# @example Load this service and instantiate a REST client
#
#   require "google/cloud/location/locations/rest"
#   client = ::Google::Cloud::Location::Locations::Rest::Client.new
#
# source://google-cloud-location//lib/google/cloud/location/locations/credentials.rb#24
module Google::Cloud::Location::Locations; end

# Client for the Locations service.
#
# An abstract interface that provides location-related information for
# a service. Service-specific metadata is provided through the
# {::Google::Cloud::Location::Location#metadata Location.metadata} field.
#
# source://google-cloud-location//lib/google/cloud/location/locations/client.rb#33
class Google::Cloud::Location::Locations::Client
  # Create a new Locations client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::Location::Locations::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::Location::Locations::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the Locations client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#123
  def initialize; end

  # Configure the Locations Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::Location::Locations::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#93
  def configure; end

  # Gets information about a location.
  #
  # @example Basic example
  #   require "google/cloud/location"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Location::Locations::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Location::GetLocationRequest.new
  #
  #   # Call the get_location method.
  #   result = client.get_location request
  #
  #   # The returned object is of type Google::Cloud::Location::Location.
  #   p result
  # @overload get_location
  # @overload get_location
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Google::Cloud::Location::Location]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Google::Cloud::Location::Location]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#306
  def get_location(request, options = T.unsafe(nil)); end

  # Lists information about the supported locations for this service.
  #
  # @example Basic example
  #   require "google/cloud/location"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Location::Locations::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Location::ListLocationsRequest.new
  #
  #   # Call the list_locations method.
  #   result = client.list_locations request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Location::Location.
  #   p item
  #   end
  # @overload list_locations
  # @overload list_locations
  # @raise [::Google::Cloud::Error] if the RPC is aborted.
  # @return [::Gapic::PagedEnumerable<::Google::Cloud::Location::Location>]
  # @yield [response, operation] Access the result along with the RPC operation
  # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Location::Location>]
  # @yieldparam operation [::GRPC::ActiveCall::Operation]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#219
  def list_locations(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#41
  def locations_stub; end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#103
  def universe_domain; end

  class << self
    # Configure the Locations Client class.
    #
    # See {::Google::Cloud::Location::Locations::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all Locations clients
    #   ::Google::Cloud::Location::Locations::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#61
    def configure; end
  end
end

# @private
#
# source://google-cloud-location//lib/google/cloud/location/locations/client.rb#35
Google::Cloud::Location::Locations::Client::API_VERSION = T.let(T.unsafe(nil), String)

# Configuration class for the Locations API.
#
# This class represents the configuration for Locations,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::Location::Locations::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_locations to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::Location::Locations::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_locations.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::Location::Locations::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_locations.timeout = 20.0
#   end
#
# source://google-cloud-location//lib/google/cloud/location/locations/client.rb#432
class Google::Cloud::Location::Locations::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Location::Locations::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#457
  def initialize(parent_config = T.unsafe(nil)); end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def channel_args; end

  # Extra parameters passed to the gRPC channel. Note: this is ignored if a
  # `GRPC::Core::Channel` object is provided as the credential.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def channel_args=(new_value); end

  # Configuration for the channel pool
  #
  # @return [::Gapic::ServiceStub::ChannelPool::Configuration]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#479
  def channel_pool; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
  #  *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def endpoint; end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def interceptors; end

  # An array of interceptors that are run before calls are executed.
  #
  # @return [::Array<::GRPC::ClientInterceptor>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def interceptors=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional gRPC headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#467
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def timeout=(new_value); end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def universe_domain; end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def universe_domain=(new_value); end
end

# The endpoint specific to the default "googleapis.com" universe. Deprecated.
#
# @private
#
# source://google-cloud-location//lib/google/cloud/location/locations/client.rb#437
Google::Cloud::Location::Locations::Client::Configuration::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)

# Configuration RPC class for the Locations API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-location//lib/google/cloud/location/locations/client.rb#500
class Google::Cloud::Location::Locations::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Location::Locations::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#513
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `get_location`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#510
  def get_location; end

  # RPC-specific configuration for `list_locations`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/client.rb#505
  def list_locations; end
end

# @private
#
# source://google-cloud-location//lib/google/cloud/location/locations/client.rb#38
Google::Cloud::Location::Locations::Client::DEFAULT_ENDPOINT_TEMPLATE = T.let(T.unsafe(nil), String)

# Credentials for the Locations API.
#
# source://google-cloud-location//lib/google/cloud/location/locations/credentials.rb#26
class Google::Cloud::Location::Locations::Credentials < ::Google::Auth::Credentials; end

# Client for the REST transport
#
# source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#25
module Google::Cloud::Location::Locations::Rest; end

# REST client for the Locations service.
#
# An abstract interface that provides location-related information for
# a service. Service-specific metadata is provided through the
# {::Google::Cloud::Location::Location#metadata Location.metadata} field.
#
# source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#35
class Google::Cloud::Location::Locations::Rest::Client
  # Create a new Locations REST client object.
  #
  # @example
  #
  #   # Create a client using the default configuration
  #   client = ::Google::Cloud::Location::Locations::Rest::Client.new
  #
  #   # Create a client using a custom configuration
  #   client = ::Google::Cloud::Location::Locations::Rest::Client.new do |config|
  #   config.timeout = 10.0
  #   end
  # @return [Client] a new instance of Client
  # @yield [config] Configure the Locations client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#125
  def initialize; end

  # Configure the Locations Client instance.
  #
  # The configuration is set to the derived mode, meaning that values can be changed,
  # but structural changes (adding new fields, etc.) are not allowed. Structural changes
  # should be made on {Client.configure}.
  #
  # See {::Google::Cloud::Location::Locations::Rest::Client::Configuration}
  # for a description of the configuration fields.
  #
  # @return [Client::Configuration]
  # @yield [config] Configure the Client client.
  # @yieldparam config [Client::Configuration]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#95
  def configure; end

  # Gets information about a location.
  #
  # @example Basic example
  #   require "google/cloud/location"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Location::Locations::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Location::GetLocationRequest.new
  #
  #   # Call the get_location method.
  #   result = client.get_location request
  #
  #   # The returned object is of type Google::Cloud::Location::Location.
  #   p result
  # @overload get_location
  # @overload get_location
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Google::Cloud::Location::Location]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Location::Location]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#293
  def get_location(request, options = T.unsafe(nil)); end

  # Lists information about the supported locations for this service.
  #
  # @example Basic example
  #   require "google/cloud/location"
  #
  #   # Create a client object. The client can be reused for multiple calls.
  #   client = Google::Cloud::Location::Locations::Rest::Client.new
  #
  #   # Create a request. To set request fields, pass in keyword arguments.
  #   request = Google::Cloud::Location::ListLocationsRequest.new
  #
  #   # Call the list_locations method.
  #   result = client.list_locations request
  #
  #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
  #   # over elements, and API calls will be issued to fetch pages as needed.
  #   result.each do |item|
  #   # Each element is of type ::Google::Cloud::Location::Location.
  #   p item
  #   end
  # @overload list_locations
  # @overload list_locations
  # @raise [::Google::Cloud::Error] if the REST call is aborted.
  # @return [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Location::Location>]
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Cloud::Location::Location>]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#211
  def list_locations(request, options = T.unsafe(nil)); end

  # @private
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#43
  def locations_stub; end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#105
  def universe_domain; end

  class << self
    # Configure the Locations Client class.
    #
    # See {::Google::Cloud::Location::Locations::Rest::Client::Configuration}
    # for a description of the configuration fields.
    #
    # @example
    #
    #   # Modify the configuration for all Locations clients
    #   ::Google::Cloud::Location::Locations::Rest::Client.configure do |config|
    #   config.timeout = 10.0
    #   end
    # @return [Client::Configuration]
    # @yield [config] Configure the Client client.
    # @yieldparam config [Client::Configuration]
    #
    # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#63
    def configure; end
  end
end

# @private
#
# source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#37
Google::Cloud::Location::Locations::Rest::Client::API_VERSION = T.let(T.unsafe(nil), String)

# Configuration class for the Locations REST API.
#
# This class represents the configuration for Locations REST,
# providing control over timeouts, retry behavior, logging, transport
# parameters, and other low-level controls. Certain parameters can also be
# applied individually to specific RPCs. See
# {::Google::Cloud::Location::Locations::Rest::Client::Configuration::Rpcs}
# for a list of RPCs that can be configured independently.
#
# Configuration can be applied globally to all clients, or to a single client
# on construction.
#
# @example
#
#   # Modify the global config, setting the timeout for
#   # list_locations to 20 seconds,
#   # and all remaining timeouts to 10 seconds.
#   ::Google::Cloud::Location::Locations::Rest::Client.configure do |config|
#   config.timeout = 10.0
#   config.rpcs.list_locations.timeout = 20.0
#   end
#
#   # Apply the above configuration only to a new client.
#   client = ::Google::Cloud::Location::Locations::Rest::Client.new do |config|
#   config.timeout = 10.0
#   config.rpcs.list_locations.timeout = 20.0
#   end
#
# source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#406
class Google::Cloud::Location::Locations::Rest::Client::Configuration
  extend ::Gapic::Config

  # @private
  # @return [Configuration] a new instance of Configuration
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Location::Locations::Rest::Client::Configuration] the object that the method was called on
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#435
  def initialize(parent_config = T.unsafe(nil)); end

  # Overrides for http bindings for the RPCs of this service
  # are only used when this service is used as mixin, and only
  # by the host service.
  #
  # @private
  # @return [::Hash{::Symbol=>::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def bindings_override; end

  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def bindings_override=(new_value); end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def credentials; end

  # Credentials to send with calls. You may provide any of the following types:
  #  *  (`String`) The path to a service account key file in JSON format
  #  *  (`Hash`) A service account key as a Hash
  #  *  (`Google::Auth::Credentials`) A googleauth credentials object
  #     (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
  #  *  (`Signet::OAuth2::Client`) A signet oauth2 client object
  #     (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
  #  *  (`nil`) indicating no credentials
  #
  # @return [::Object]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def credentials=(new_value); end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def endpoint; end

  # A custom service endpoint, as a hostname or hostname:port. The default is
  # nil, indicating to use the default endpoint in the current universe domain.
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def endpoint=(new_value); end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_name; end

  # The library name as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_name=(new_value); end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def lib_version; end

  # The library version as recorded in instrumentation and logging
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def lib_version=(new_value); end

  # Additional headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def metadata; end

  # Additional headers to be sent with the call.
  #
  # @return [::Hash{::Symbol=>::String}]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def metadata=(new_value); end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def quota_project; end

  # A separate project against which to charge quota.
  #
  # @return [::String]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def quota_project=(new_value); end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def retry_policy; end

  # The retry policy. The value is a hash with the following keys:
  #  *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
  #  *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
  #  *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
  #  *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
  #     trigger a retry.
  #
  # @return [::Hash]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def retry_policy=(new_value); end

  # Configurations for individual RPCs
  #
  # @return [Rpcs]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#445
  def rpcs; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def scope; end

  # The OAuth scopes
  #
  # @return [::Array<::String>]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def scope=(new_value); end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def timeout; end

  # The call timeout in seconds.
  #
  # @return [::Numeric]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def timeout=(new_value); end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#70
  def universe_domain; end

  # The universe domain within which to make requests. This determines the
  # default endpoint URL. The default value of nil uses the environment
  # universe (usually the default "googleapis.com" universe).
  #
  # @return [::String, nil]
  #
  # source://gapic-common/0.22.0/lib/gapic/config.rb#83
  def universe_domain=(new_value); end
end

# The endpoint specific to the default "googleapis.com" universe. Deprecated.
#
# @private
#
# source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#411
Google::Cloud::Location::Locations::Rest::Client::Configuration::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)

# Configuration RPC class for the Locations API.
#
# Includes fields providing the configuration for each RPC in this service.
# Each configuration object is of type `Gapic::Config::Method` and includes
# the following configuration fields:
#
#  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
#  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional headers
#  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
#     include the following keys:
#      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
#      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
#      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
#      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
#         trigger a retry.
#
# source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#470
class Google::Cloud::Location::Locations::Rest::Client::Configuration::Rpcs
  # @private
  # @return [Rpcs] a new instance of Rpcs
  # @yield [_self]
  # @yieldparam _self [Google::Cloud::Location::Locations::Rest::Client::Configuration::Rpcs] the object that the method was called on
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#483
  def initialize(parent_rpcs = T.unsafe(nil)); end

  # RPC-specific configuration for `get_location`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#480
  def get_location; end

  # RPC-specific configuration for `list_locations`
  #
  # @return [::Gapic::Config::Method]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#475
  def list_locations; end
end

# @private
#
# source://google-cloud-location//lib/google/cloud/location/locations/rest/client.rb#40
Google::Cloud::Location::Locations::Rest::Client::DEFAULT_ENDPOINT_TEMPLATE = T.let(T.unsafe(nil), String)

# REST service stub for the Locations service.
# Service stub contains baseline method implementations
# including transcoding, making the REST call, and deserialing the response.
#
# source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#31
class Google::Cloud::Location::Locations::Rest::ServiceStub
  # @return [ServiceStub] a new instance of ServiceStub
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#32
  def initialize(endpoint:, endpoint_template:, universe_domain:, credentials:); end

  # The effective endpoint
  #
  # @return [String]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#59
  def endpoint; end

  # Baseline implementation for the get_location REST call
  #
  # @param request_pb [::Google::Cloud::Location::GetLocationRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding. Only used internally.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Location::Location] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Location::Location]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#119
  def get_location(request_pb, options = T.unsafe(nil), bindings_override: T.unsafe(nil)); end

  # Baseline implementation for the list_locations REST call
  #
  # @param request_pb [::Google::Cloud::Location::ListLocationsRequest] A request object representing the call parameters. Required.
  # @param options [::Gapic::CallOptions] Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
  # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding. Only used internally.
  # @raise [::ArgumentError]
  # @return [::Google::Cloud::Location::ListLocationsResponse] A result object deserialized from the server's reply
  # @yield [result, operation] Access the result along with the TransportOperation object
  # @yieldparam result [::Google::Cloud::Location::ListLocationsResponse]
  # @yieldparam operation [::Gapic::Rest::TransportOperation]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#79
  def list_locations(request_pb, options = T.unsafe(nil), bindings_override: T.unsafe(nil)); end

  # The effective universe domain
  #
  # @return [String]
  #
  # source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#50
  def universe_domain; end

  class << self
    # GRPC transcoding helper method for the get_location REST call
    #
    # @param request_pb [::Google::Cloud::Location::GetLocationRequest] A request object representing the call parameters. Required.
    # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#185
    def transcode_get_location_request(request_pb, bindings_override: T.unsafe(nil)); end

    # GRPC transcoding helper method for the list_locations REST call
    #
    # @param request_pb [::Google::Cloud::Location::ListLocationsRequest] A request object representing the call parameters. Required.
    # @param bindings_override [::Array<::Gapic::Rest::GrpcTranscoder::HttpBinding>, nil] Binding overrides for the transcoding.
    # @private
    # @return [Array(String, [String, nil], Hash{String => String})] Uri, Body, Query string parameters
    #
    # source://google-cloud-location//lib/google/cloud/location/locations/rest/service_stub.rb#154
    def transcode_list_locations_request(request_pb, bindings_override: T.unsafe(nil)); end
  end
end

# source://google-cloud-location//lib/google/cloud/location/version.rb#23
Google::Cloud::Location::VERSION = T.let(T.unsafe(nil), String)
